<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<chapter id="chapter-common-gwt">
  <title>Common GWT</title>

  <para>The common GWT module is a module with common code for the two GWT
  based faced, the GWT face which uses the SmartGWT widget library, and the
  PureGWT face which is not tied to a widget library.</para>

  <para>Some of the features include the command dispatcher, which includes
  some important security hooks, and a string of utility classes which can
  help you in your application.</para>

  <section>
    <title>Setting up GWT-RPC communication</title>

    <para>Geomajas makes use of GWT RPC, which is a mechanism for passing Java
    objects to and from a server over standard HTTP. GWT RPC allows the client
    to call a server-based service through an automatically generated proxy
    class. Synchronous or asynchronous calls can be made to the server through
    a very efficient protocol on top of HTTP. The service endpoint is defined
    by configuring a standard servlet mapping or an MVC controller, which is
    more in line with Spring MVC practices.</para>

    <para>Because the GWT module name is the first part of the service
    endpoint URL, the MVC controller should also be mapped to this module
    name. This requires the following addition to the web.xml file:</para>

    <para><programlisting>&lt;servlet-mapping&gt;
  &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;
  &lt;url-pattern&gt;/d/*&lt;/url-pattern&gt;
  &lt;url-pattern&gt;/<emphasis>&lt;GWT module name&gt;</emphasis>/*&lt;/url-pattern&gt; &lt;!-- add this line --&gt;
&lt;/servlet-mapping&gt;</programlisting>This is all that is necessary to
    enable the communication and should work for all GWT faces. This will also
    establish a fallback resource controller that ensures that static
    resources can be successfully retrieved through the dispatcher servlet.
    This is necessary because the above mapping will catch any request that
    has the module name as the first part in its path.</para>
  </section>

  <section id="common-dispatcher">
    <title>Command dispatcher</title>

    <para>The command dispatcher allows you to communicate to the server using
    the Geomajas command interface with the Geomajas built-in support for
    security and localization. Using the GwtCommandDispatcher class, you can
    send your request objects to the server and process the response.</para>

    <para>A simple invocation looks like this:</para>

    <xi:include href="listing/GwtCommandExecution.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The security will be handled automatically by the command
    dispatcher.</para>

    <para>You can register a token request handler which is invoked when the
    command returns with an invalid token exception (or any security exception
    when the token is null). Once the new token is available, the command will
    be retried.</para>

    <para>There are events on the dispatcher for changes in token. You can
    register a handler for them.</para>

    <para>There are also events to indicate when a command is in process or
    not.</para>

    <para>The dispatcher includes methods to request details about the current
    token and the logged i user.</para>
  </section>

  <section>
    <title>Controller</title>

    <para>This module also provides definitions for event controllers on the
    map. A controller is meant to catch mouse or touch events and react upon
    them. Together with the controller interface, an AbstractController class
    is provided as a more suitable base to start working from. Still, each
    face has extended this base controller interface with it's own methods
    (for activation and deactivation for example). Each face also has an
    abstract controller class to be used as a base to implement your own
    controllers.</para>

    <section>
      <title>Mouse and touch events</title>

      <para>The AbstractController tries to align the mouse and touch events
      by providing extra methods through the MapDownHandler, MapUpHandler and
      MapDragHandler. The key is that both mouse events and touch events
      extend the same base class, HumanInputEvent. The three handlers provide
      the following methods:</para>

      <itemizedlist>
        <listitem>
          <para>onDown(HumanInputEvent): Overriding this empty method will
          provide support for both the onMouseDown and onTouchStart
          events.</para>
        </listitem>

        <listitem>
          <para>onUp(HumanInputEvent): Overriding this empty method will
          provide support for both the onMouseUp and onTouchEnd events.</para>
        </listitem>

        <listitem>
          <para>onDrag(HumanInputEvent): Overriding this method will provide
          support for the onTouchMove and the onMouseMove events. The
          onMouseMove events though will only get here is the left mouse
          button is down. Simply put, this method accounts for
          dragging.</para>
        </listitem>
      </itemizedlist>

      <para>You can still choose to override the original mouse and/or touch
      handling methods if you are not interested in having both desktop and
      mobile support.</para>

      <tip>
        <para>If you need a specific reaction to the onMouseMove in
        combination with dragging behaviour, you can still override the
        onMouseMove, and have it also call the super implementation (from
        AbstractController).</para>
      </tip>
    </section>

    <section>
      <title>Event utility methods</title>

      <para>The controller interface also provides a few utility methods that
      operate on HumanInputEvents (again to support both mouse and touch
      events). This includes getting the target HTML element from an event or
      getting the event location in the required render space (pixels or map
      CRS).</para>
    </section>
  </section>

  <section>
    <title>Getting configuration</title>

    <para>There is a special service for getting the client configuration from
    the server. This is the ClientConfigurationService class. It serves as a
    central access point for your application configuration and limits the
    number of request for configuration information to the server.</para>

    <para>It is specifically built to be extensible. You con define how the
    application configuration is obtained from the server. This allows you to
    replace the invocation of the GetConfiguration command by something which
    also contains application specific information. Have a look at the
    staticsecurity example application for an example how this can be
    used.</para>
  </section>

  <section>
    <title>Utility classes</title>

    <para>Several utility classes have been provided.</para>

    <section>
      <title>Log</title>

      <para>This is a simple utility class which allows you to log
      data.</para>

      <para>You can force logging to the server log or use the usual log
      levels. The normal logging uses commons logging. You can configure in
      your .gwt.xml file how this should be treated, see <ulink
      url="http://code.google.com/webtoolkit/doc/latest/DevGuideLogging.html">http://code.google.com/webtoolkit/doc/latest/DevGuideLogging.html</ulink>.
      The error and warn levels will also log to the server.</para>
    </section>

    <section>
      <title>HTML building utilities</title>

      <para><itemizedlist>
          <listitem>
            <para>Dom: includes browser identification tests and constants and
            helpers for various DOM related manipulations.</para>
          </listitem>

          <listitem>
            <para>Html: constants for the various HTML tag and attribute
            names.</para>
          </listitem>

          <listitem>
            <para>HtmlBuilder: helper for building pieces of HTML. Usually
            used in combination with the constants from Html.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>General utilities</title>

      <para><itemizedlist>
          <listitem>
            <para>AttributeUtil: helper to build attribute objects.</para>
          </listitem>

          <listitem>
            <para>EqualsUtil: helps to determine if two objects are equal in a
            null-safe way.</para>
          </listitem>

          <listitem>
            <para>StringUtil: some string handling methods.</para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>
</chapter>
