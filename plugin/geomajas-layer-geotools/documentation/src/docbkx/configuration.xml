<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-configuration">
  <title>Configuration</title>

  <para></para>

  <section id="geotools">
    <title>GeoTools layer configuration</title>

    <para>This section handles possible configurations using the GeoTools
    layer. As GeoTools supports a whole range of data formats, not all of them
    will be covered here.</para>

    <para></para>

    <para>Apart from a reference to the layer info, you can set the following
    parameters:</para>

    <table>
      <title>GeoToolsLayer configuration</title>

      <tgroup cols="2">
        <colspec colnum="1" colwidth="1*" />

        <colspec colnum="2" colwidth="2*" />

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>url</entry>

            <entry>URL for the shape file. Apart from standard protocols
            supported by Java, you can also use the "classpath:" protocol (the
            resource location should not start with a slash) to refer to shape
            files on the class path.</entry>
          </row>

          <row>
            <entry>dbtype</entry>

            <entry>Database type, useful when the data store is a
            database.</entry>
          </row>

          <row>
            <entry>parameters</entry>

            <entry>You can define additional parameters which can be passed to
            the GeoTools data store. These are name/value pairs which are
            passed in <code>org.geomajas.configuration.Parameter</code>
            objects.</entry>
          </row>

          <row>
            <entry>dataSource</entry>

            <entry>javax.sql.DataSource to be used for the database datastore.
            This allows to configure a different connection pool and reuse it
            between layers.</entry>
          </row>

          <row>
            <entry>cooldownTimeBetweenInitializationRetries</entry>

            <entry>Period in milliseconds that the system has to wait between
            attempts to connect to the data source. When the layer fails to
            access the data store, it is discarded and it will try to rebuild
            the data store on the next access. However, to prevent hammering
            the server, it will only try to rebuild the data store when the
            configured time has passed.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section id="WFS">
      <title>Configuring a Web Feature Service (WFS) layer</title>

      <para>In order to read data from a WFS, a GeoTools layer is required.
      Currently GeoTools has support for WFS 1.0 and 1.1, and support for
      WFS-T 1.0. As the GeoTools WFS plug-in is not by default part of the
      class path, you must add it to the class path manually. First things
      first, the XML configuration. There are 2 ways of configuring a WFS
      layer through the GeoTools layer. As Geomajas uses a GeoTools DataStore
      behind the screens, it is possible to configure this DataStore
      separately, and than attach it to the GeoTools layer. This would have
      the advantage of re-using the same GeoTools DataStore over multiple
      layers. Alternatively you can configure the required parameters directly
      within the Layer configuration.</para>

      <para>In general, the following parameters can be configured:</para>

      <para><itemizedlist>
          <listitem>
            <para><emphasis>WFSDataStoreFactory:GET_CAPABILITIES_URL</emphasis>:
            URL for the getCapabilities document on the server
            instance.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:PROTOCOL</emphasis>: determine
            which HTTP command use when requesting WFS functionality. Set this
            value to "true" for POST, "false" for GET or NULL for AUTO.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:USERNAME</emphasis>: set the
            user name which should be used to authenticate the connection.
            This parameter should not be used without the password
            parameter.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:PASSWORD</emphasis>: set the
            password which should be used to authenticate the connection. This
            parameter should not be used without the user name
            parameter.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:TIMEOUT</emphasis>: specify
            the connection timeout in milliseconds. This parameter has a
            default value of 3000ms.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:BUFFER_SIZE</emphasis>: set
            the buffer size for the features. This parameter has a default
            value of 10 features.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:TRY_GZIP</emphasis>: indicate
            whether the data store should use gzip compression to transfer
            data if the server supports it. Default is true.</para>
          </listitem>

          <listitem>
            <para><emphasis>WFSDataStoreFactory:LENIENT</emphasis>: indicate
            whether the data store should do its best to create features from
            the provided data even if it does not accurately match the schema.
            Errors will be logged but the parsing will continue if this is
            true. Default is false.</para>
          </listitem>
        </itemizedlist></para>

      <para>Note that most of the parameters above are optional. Only the
      capabilities URL is required.</para>

      <para>You can configure a WFS layer like this:</para>

      <programlisting>&lt;bean name="anotherWfsLayer" class="org.geomajas.layer.geotools.GeoToolsLayer"&gt;
   &lt;property name="parameters"&gt;
      &lt;list&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="WFSDataStoreFactory:GET_CAPABILITIES_URL" /&gt;
            &lt;property name="value" value="http://www.some-wfs.com/ows?service=WFS&amp;amp;VERSION&amp;#61;1.0.0&amp;amp;request&amp;#61;GetCapabilities" /&gt;
         &lt;/bean&gt;
         &lt;bean class="org.geomajas.configuration.Parameter"&gt;
            &lt;property name="name" value="WFSDataStoreFactory:TIMEOUT" /&gt;
            &lt;property name="value" value="5000" /&gt;
         &lt;/bean&gt;
      &lt;/list&gt;
   &lt;/property&gt;
   &lt;property name="layerInfo" ref="blablaInfo" /&gt;
&lt;/bean&gt; </programlisting>

      <para>As said in the beginning of this section, the GeoTools WFS library
      needs to be added as a dependency in your project. When using Maven, you
      can add the following dependency:</para>

      <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;org.geotools&lt;/groupId&gt;
  &lt;artifactId&gt;gt-wfs&lt;/artifactId&gt;
  &lt;version&gt;${geotools-version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
    </section>

    <section id="db">
      <title>Configuring a database layer (PostGIS, Oracle
      Spatial,...)</title>

      <warning>
        <para>The configurations in this section still need to be double
        checked! If you find errors, please post it on the forum.</para>
      </warning>

      <para>Configuring a GeoTools layer that makes use of a PostGIS database,
      is again a question of using the correct parameters. There is the choice
      of configuring the datasource separately or using the built-in
      datasource of GeoTools. By configuring the datasource separately, it can
      be used by multiple layers. In the case of a database, this method would
      almost always be preferable.</para>

      <para>If you prefer a custom datasource configuration (we recommend
      BoneCP but alternatives are possible), the dataSource property should be
      configured:</para>

      <itemizedlist>
        <listitem>
          <para>dataSource: bean reference or inner bean of type
          javax.sql.DataSource</para>
        </listitem>
      </itemizedlist>

      <para>In this case only the <emphasis>dbtype</emphasis> and
      <emphasis>namespace</emphasis> parameters should be configured:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>dbtype</emphasis>: The type of database: (e.g.
          "postgis").</para>
        </listitem>

        <listitem>
          <para><emphasis>namespace</emphasis>: The namespace of the datastore
          (e.g. "postgis").</para>
        </listitem>
      </itemizedlist>

      <para>If using the built-in datasource of GeoTools, the following extra
      parameters can be configured:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>database</emphasis>: The name of the
          database.</para>
        </listitem>

        <listitem>
          <para><emphasis>user</emphasis>: The user name to log in
          with.</para>
        </listitem>

        <listitem>
          <para><emphasis>passwd</emphasis>: The user's password.</para>
        </listitem>

        <listitem>
          <para><emphasis>host</emphasis>: The hostname or IP address of the
          machine where the database is located.</para>
        </listitem>

        <listitem>
          <para><emphasis>port</emphasis>: The port where the database runs
          (default for PostGIS is 5432).</para>
        </listitem>
      </itemizedlist>

      <para>Configuring a database layer using PostGIS can be done like this
      (with separate datasource):</para>

      <programlisting>&lt;bean id="postgisDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close"&gt;
   &lt;property name="driverClass" value="org.postgresql.Driver" /&gt;
   &lt;property name="jdbcUrl" value="jdbc:postgresql://localhost:5432/app" /&gt;
   &lt;property name="username" value="app"/&gt;
   &lt;property name="password" value="app"/&gt;
   &lt;property name="idleConnectionTestPeriod" value="60"/&gt;
   &lt;property name="idleMaxAge" value="240"/&gt;
   &lt;property name="maxConnectionsPerPartition" value="30"/&gt;
   &lt;property name="minConnectionsPerPartition" value="10"/&gt;
   &lt;property name="partitionCount" value="3"/&gt;
   &lt;property name="acquireIncrement" value="5"/&gt;
   &lt;property name="statementsCacheSize" value="100"/&gt;
   &lt;property name="releaseHelperThreads" value="3"/&gt;
&lt;/bean&gt;

&lt;bean name="layerCountries" class="org.geomajas.layer.geotools.GeoToolsLayer"&gt;
  &lt;property name="layerInfo" ref="layerCountriesInfo"/&gt;
  &lt;property name="dataSource" ref="postgisDataSource"/&gt;
  &lt;property name="parameters"&gt;
   &lt;list&gt;
    &lt;bean class="org.geomajas.configuration.Parameter"&gt;
     &lt;property name="name" value="namespace" /&gt;
     &lt;property name="value" value="postgis" /&gt;
    &lt;/bean&gt;
    &lt;bean class="org.geomajas.configuration.Parameter"&gt;
     &lt;property name="name" value="dbtype" /&gt;
     &lt;property name="value" value="postgis" /&gt;
    &lt;/bean&gt;
   &lt;/list&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>

      <para>Don't forget to also add the necessary GeoTools datastore library
      (typically gt-jdbc-xxx) to your classpath and the required database
      driver libraries. Here is an example that adds the postgresql driver and
      (next generation) GeoTools PostGIS JDBC library to the pom.xml (when
      using Maven):</para>

      <programlisting>&lt;dependency&gt;
   &lt;groupId&gt;postgresql&lt;/groupId&gt;
   &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
   &lt;version&gt;8.1-407.jdbc3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.geotools&lt;/groupId&gt;
   &lt;artifactId&gt;gt-jdbc-postgis&lt;/artifactId&gt;
   &lt;version&gt;${geotools-version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>

      <note>
        <para>When configuring the general layer information (and attribute
        information), the value may differ, depending on the kind of database
        that you use. For example, column names in a PostGIS database all have
        lower cases, and so the Geomajas attribute configuration should
        reflect this. If you are using Oracle Spatial on the other hand all
        column names are upper case, so your configuration should contain
        upper case for the attribute names.</para>
      </note>
    </section>
  </section>

  <section>
    <title>Non-typed feature ids</title>

    <para>Geomajas always uses the id returned by the feature model. For
    geotools layers, this is the same id as returned by the datastore and
    therefore follows any conventions that geotools is imposing. For the
    next-generation JDBC datastores (gt-jdbc-xxx), this means that the id is
    <code>typed</code>, i.e. constructed as a combination of the type name
    (table or view name) and the primary key, and separated with a dot:
    <code>mytable.1</code>, <code>mytable.2</code>, etc....</para>

    <para>For first-generation JDBC datastores (gt-xxx), which support
    non-typed fids, a special configuration parameter
    <code>useTypedFids</code> has been added. This parameter defaults to true,
    but can be set to false if one needs the primary key without prefixes as
    fid:</para>

    <programlisting>&lt;bean name="layerPointNonTyped" class="org.geomajas.layer.geotools.GeoToolsLayer"&gt;
    &lt;property name="layerInfo" ref="layerPointNonTypedInfo" /&gt;
    &lt;property name="parameters"&gt;
        &lt;list&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="namespace" /&gt;
                &lt;property name="value" value="postgis" /&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="dbtype" /&gt;
                &lt;property name="value" value="postgis" /&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="database" /&gt;
                &lt;property name="value" value="test" /&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="user" /&gt;
                &lt;property name="value" value="postgres" /&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="passwd" /&gt;
                &lt;property name="value" value="postgis" /&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="host" /&gt;
                &lt;property name="value" value="localhost" /&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="port" /&gt;
                &lt;property name="value" value="5432" /&gt;
            &lt;/bean&gt;
<emphasis role="bold">            &lt;bean class="org.geomajas.configuration.Parameter"&gt;
                &lt;property name="name" value="useTypedFids" /&gt;
                &lt;property name="value" value="false" /&gt;
            &lt;/bean&gt;
 </emphasis>       &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
  </section>

  <section id="shape">
    <title>Shape in memory layer</title>

    <para>This layer is backed by a shape file that is loaded in memory at
    startup. All layer updates are performed in memory, so this layer is not
    really useful except for examples.</para>

    <para><table>
        <title>ShapeInMemLayer configuration</title>

        <tgroup cols="2">
          <colspec colnum="1" colwidth="1*" />

          <colspec colnum="2" colwidth="2*" />

          <thead>
            <row>
              <entry>ShapeInMemLayer configuration</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>url</entry>

              <entry>URL for the shape file. Apart from standard protocols
              supported by Java, you can also use the "classpath:" protocol
              (the resource location should not start with a slash) to refer
              to shape files on the class path.</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
  </section>

  <section id="tx">
    <title>Transaction configuration</title>

    <para>For GeoTools layers, the following transaction configuration can be
    used:</para>

    <xi:include href="listing/GeoToolsTx.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>There are 2 entries:</para>

    <itemizedlist>
      <listitem>
        <para>A tag to enable annotation-based transactional behavior,
        internally used by Geomajas (and your custom code) to decide which
        commands need transaction support.</para>
      </listitem>

      <listitem>
        <para>The platform transaction manager: Spring comes with a set of
        predefined transaction managers that are tied to JDBC, Hibernate, JTA,
        etc.... You can use any of these, as long as there is at least one
        transaction manager bean defined. If you have no need for a
        transaction manager outside of the geotools layer and there is no
        transaction manager that fits your geotools layer (e.g. your layer is
        not JDBC-based), you can should use a dummy transaction manager here to
        enable transaction synchronization:
        <code>GeotoolsTransactionManager</code>.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
