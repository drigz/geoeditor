<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-howto">
  <title>How-to</title>

  <para>This section covers a few specific cases that might come in handy when
  really using the Geomajas Hibernate layer plug-in.</para>

  <section>
    <title>How to use a many-to-one relation</title>

    <para>A many-to-one relation is the Hibernate term for what would in the
    database world be called a foreign key. Say you have a table
    ("areaofinterest") with a foreign key to some other table("aoitype"). In
    order to get this relation configured as an attribute within the Geomajas
    layer definition, the following must be done:</para>

    <itemizedlist>
      <listitem>
        <para>Both tables must actually exist in the database.</para>
      </listitem>

      <listitem>
        <para>For both tables a Java O/R mapping class must be defined.</para>
      </listitem>

      <listitem>
        <para>The Geomajas layer definition must include the many-to-one
        relation in it's attribute definitions.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Spatial database tables</title>

      <para>This time, 2 tables must be present in the database, in order for
      one to be able to point to the other. Let's say the second table,
      containing the type, is very simple and holds only an ID and a
      description:</para>

      <example>
        <title>SQL for creating a PostGIS spatial table</title>

        <programlisting>CREATE TABLE aoitype (
    id integer NOT NULL,
    description character varying,
);</programlisting>
      </example>

      <para>Now we have the "areaofinterest" table point to it with a foreign
      key ("type_id"):</para>

      <example>
        <title>SQL for creating a PostGIS spatial table</title>

        <programlisting>CREATE TABLE areaofinterest (
    id integer NOT NULL,
    title character varying(100) NOT NULL,
    description character varying,
    type_id integer NOT NULL,
    geom geometry,
    CONSTRAINT enforce_dims_geom CHECK ((ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((geometrytype(geom) = 'POLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((srid(geom) = 900913))
);

ALTER TABLE ONLY areaofinterest ADD CONSTRAINT fk_areaofinterest_aoitype FOREIGN KEY (type_id) REFERENCES aoitype(id);</programlisting>
      </example>
    </section>

    <section>
      <title>Java O/R mapping</title>

      <para>For both database table, we will now create Java mapping classes.
      First the "aoitype":</para>

      <example>
        <title>AoiType class</title>

        <programlisting>@Entity
@Table(name = "aoitype")
public class AoiType{

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "description")
    private String description;

    // Constructors, getters, and setters
    ....</programlisting>
      </example>

      <para>We now update the AreaOfInterest class to include the ManyToOne
      relation:</para>

      <example>
        <title>AreaOfInterest class</title>

        <programlisting>@Entity
@Table(name = "areaofinterest")
public class AreaOfInterest {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, name = "title")
    private String title;

    @Column(name = "description")
    private String description;

<emphasis role="bold">    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "type_id", nullable = false)
    private AoiType type;</emphasis>

    @Type(type = "org.hibernatespatial.GeometryUserType")
    @Column(nullable = false, name = "geom")
    private Geometry geometry;

    // Constructors, getters, and setters
    ....</programlisting>
      </example>
    </section>

    <section>
      <title>Vector layer configuration</title>

      <para>Lastly, you add the new many-to-one relation to the list of
      attributes:</para>

      <example>
        <title>VectorLayerInfo for the AreaOfInterest class</title>

        <programlisting>...
    &lt;property name="attributes"&gt;
        &lt;list&gt;
            &lt;bean class="org.geomajas.configuration.PrimitiveAttributeInfo"&gt;
                &lt;property name="label" value="Title" /&gt;
                &lt;property name="name" value="title" /&gt;
                &lt;property name="editable" value="true" /&gt;
                &lt;property name="identifying" value="true" /&gt;
                &lt;property name="type" value="STRING" /&gt;
            &lt;/bean&gt;
            &lt;bean class="org.geomajas.configuration.PrimitiveAttributeInfo"&gt;
                &lt;property name="label" value="Description" /&gt;
                &lt;property name="name" value="description" /&gt;
                &lt;property name="editable" value="true" /&gt;
                &lt;property name="identifying" value="false" /&gt;
                &lt;property name="type" value="STRING" /&gt;
            &lt;/bean&gt;

<emphasis role="bold">            &lt;bean class="org.geomajas.configuration.AssociationAttributeInfo"&gt;
                &lt;property name="label" value="Type" /&gt;
                &lt;property name="name" value="type" /&gt;
                &lt;property name="editable" value="true" /&gt;
                &lt;property name="identifying" value="false" /&gt;
                &lt;property name="type" value="MANY_TO_ONE" /&gt;
                &lt;property name="feature"&gt;
                    &lt;bean class="org.geomajas.configuration.FeatureInfo"&gt;
                        &lt;property name="dataSourceName" value="org.geomajas.server.pojo.AoiType" /&gt;
                        &lt;property name="identifier"&gt;
                            &lt;bean class="org.geomajas.configuration.PrimitiveAttributeInfo"&gt;
                                &lt;property name="label" value="Id" /&gt;
                                &lt;property name="name" value="id" /&gt;
                                &lt;property name="type" value="LONG" /&gt;
                            &lt;/bean&gt;
                        &lt;/property&gt;
                        &lt;property name="attributes"&gt;
                            &lt;list&gt;
                                &lt;bean class="org.geomajas.configuration.PrimitiveAttributeInfo"&gt;
                                    &lt;property name="label" value="Description" /&gt;
                                    &lt;property name="name" value="description" /&gt;
                                    &lt;property name="editable" value="false" /&gt;
                                    &lt;property name="identifying" value="true" /&gt;
                                    &lt;property name="type" value="STRING" /&gt;
                                &lt;/bean&gt;
                            &lt;/list&gt;
                        &lt;/property&gt;
                    &lt;/bean&gt;
                &lt;/property&gt;
            &lt;/bean&gt;

</emphasis>        &lt;/list&gt;
    &lt;/property&gt;
...</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>How to use a one-to-many relation</title>

    <para>TODO</para>
  </section>

  <section>
    <title>How to create my own DAOs</title>

    <para>If you have followed the configuration guidelines and made use of
    the Spring configuration options, this will be a piece of cake: we
    inject the SessionFactory at run-time into your DAO implementation, and
    this SessionFactory will take care of all session and transaction
    handling.</para>

    <para>Say, for example, we have the following DAO interface:</para>

    <example>
      <title>DAO interface</title>

      <programlisting>public interface ZoneDao {

    List&lt;AreaOfInterest&gt; getByTitle(String title);
}</programlisting>
    </example>

    <para>In this case, a possible implementation could look like this:</para>

    <example>
      <title>DAO implementation</title>

      <programlisting>@Component
@Transactional(rollbackFor = Throwable.class, propagation = Propagation.REQUIRED)
public class ZoneDaoImpl implements ZoneDao {

    @Autowired
    private SessionFactory sessionFactory;

    public List&lt;AreaOfInterest&gt; getByTitle(String title) {
        Session session = sessionFactory.getCurrentSession();
        Query query = session.createQuery("FROM AreaOfInterest where title LIKE " + title);
        return (List&lt;AreaOfInterest&gt;) query.list();
    }
}</programlisting>
    </example>

    <para>And that's it! No more worrying about sessions or transactions, or
    how the hell everything should get initialized...</para>
  </section>

  <section>
    <title>How to use scrollable resultsets</title>

    <para>If you have a very large table it might be desirable to retrieve
    features not as a list but as a scrollable resultset so only the features
    you actually use are also retrieved from the underlying database (for
    instance when paging).</para>

    <para>To retrieve features as a scrollable resultset you add the property
    <property>scrollableResultSet to your hibernate layer
    definition:</property></para>

    <example>
      <title>Hibernate layer definition</title>

      <programlisting>&lt;bean name="midori" class="org.geomajas.layer.hibernate.HibernateLayer"&gt;
    &lt;property name="layerInfo" ref="midoriInfo" /&gt;
<emphasis role="bold">    &lt;property name="scrollableResultSet" value="true" /&gt;</emphasis>
    &lt;property name="featureModel"&gt;
        &lt;bean class="org.geomajas.layer.hibernate.HibernateFeatureModel"&gt;
            &lt;property name="sessionFactory" ref="simpleSessionFactory" /&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="sessionFactory" ref="simpleSessionFactory" /&gt;
&lt;/bean&gt;</programlisting>
    </example>

    <para>Please note that your databasedriver needs to support Scrollable
    resultsets.</para>
  </section>

  <section>
    <title>How to configure a connection pool</title>

    <para>There are many connection pool libraries which can be used. Some of
    the best known include DBCP and C3P0. The former may cause deadlocks while
    the latter is not known for its speed. An alternative connection pool
    library is <ulink url="http://jolbox.com/">BoneCP</ulink>. This can be
    included using the following dependency:</para>

    <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;com.jolbox&lt;/groupId&gt;
    &lt;artifactId&gt;bonecp&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>

    <para>A sample Hibernate definition looks like this:</para>

    <programlisting>&lt;!-- BoneCP configuration --&gt;
&lt;bean id="postgisDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close"&gt;
   &lt;property name="driverClass" value="org.postgresql.Driver" /&gt;
   &lt;property name="jdbcUrl" value="jdbc:postgresql://localhost:5432/databaseName" /&gt;
   &lt;property name="username" value="dbUser"/&gt;
   &lt;property name="password" value="dbPw"/&gt;
   &lt;property name="idleConnectionTestPeriod" value="60"/&gt;
   &lt;property name="idleMaxAge" value="240"/&gt;
   &lt;property name="maxConnectionsPerPartition" value="30"/&gt;
   &lt;property name="minConnectionsPerPartition" value="10"/&gt;
   &lt;property name="partitionCount" value="3"/&gt;
   &lt;property name="acquireIncrement" value="5"/&gt;
   &lt;property name="statementsCacheSize" value="100"/&gt;
   &lt;property name="releaseHelperThreads" value="3"/&gt;
&lt;/bean&gt;

&lt;!-- Hibernate SessionFactory --&gt;
&lt;bean id="postgisSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="postgisDataSource" /&gt;
    &lt;property name="configLocation" value="classpath:/hibernate.cfg.xml" /&gt;
    &lt;property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration" /&gt;
&lt;/bean&gt;

&lt;!-- enable the configuration of transactional behavior based on annotations --&gt;
&lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;

&lt;bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"&gt;
    &lt;property name="sessionFactory" ref="postgisSessionFactory" /&gt;
&lt;/bean&gt;

&lt;!-- Needed when the Hibernate pojo classes contain dates. --&gt;
&lt;bean name="simpleDateFormat" class="java.text.SimpleDateFormat"&gt;
    &lt;constructor-arg type="java.lang.String" value="dd/MM/yyyy" /&gt;
&lt;/bean
</programlisting>
  </section>

  <section>
    <title>How to use a second level cache</title>

    <para>In your hibernate.cfg.xml file, add the following excerpt:</para>

    <programlisting>&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;
&lt;property name="hibernate.cache.use_query_cache"&gt;true&lt;/property&gt;
&lt;property name="hibernate.cache.region.factory_class"&gt;
    org.hibernate.cache.infinispan.InfinispanRegionFactory
&lt;/property&gt;
</programlisting>

    <para>To make sure this works, you also need the <ulink
    url="http://www.jboss.org/infinispan/">Infinispan</ulink> dependencies
    (these are already available when using the caching plug-in. Additionally,
    you also need the Hibernate-Infinispan bridge:</para>

    <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
    &lt;artifactId&gt;hibernate-infinispan&lt;/artifactId&gt;
&lt;/dependency&gt;
</programlisting>
  </section>

  <section>
    <title>Error "Operation on two geometries with different SRIDs"</title>

    <para>This is an exception which can occur of your geometries are stored
    in the database using a different SRID as the one configured in the
    layer.</para>

    <para>You have to make sure that the SRID mathes the declaration.</para>

    <para>When converting a shapefile using shp2pqsql, you have to specify the
    SRID to be set (as this defaults to -1). Use a command like:</para>

    <programlisting>shp2pgsql -s 4326 shape-base-name</programlisting>
  </section>
</chapter>
