<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<chapter id="chapter-howto">
  <title>How-to</title>

  <sect1>
    <title>How to define a GIN injector that used both PureGWT face and the
    WMS client plugin</title>

    <para>This plugin extends the default Geomajas injection definitions, by
    providing it's own GIN module definition and GIN injector interface. If
    you have an application wherin you want to define a GIN injector that
    supports the GIN modules of both the PureGWT face and the WMS client
    plugin, you can define it as follows:</para>

    <programlisting>@GinModules({ GeomajasGinModule.class, WmsClientGinModule.class })
public interface MyApplicationGinjector extends WmsClientGinjector, GeomajasGinjector {
}</programlisting>
  </sect1>

  <sect1>
    <title>How to create a new WMS Layer and add it to the map</title>

    <para>Creating a new WmsLayer instance, is done through the GIN injection
    framework. You need to define a GIN injector (see previous paragraph), and
    have this injector create the instance for you:</para>

    <programlisting>// It is best to define your own injector, and make it a global static variable...
// (you need only one for your app)
WmsClientGinjector injector = GWT.create(WmsClientGinjector.class);

// We create a new map:
MapPresenter mapPresenter = injector.getMapPresenter()
mapPresenter.initialize("puregwt-app", "mapEmpty"); // Map with an empty configuration
mapPresenter.getEventBus().addMapInitializationHandler(new MapInitializationHandler() {

    // When the map has been initialized, we can start adding WMS layers:
    public void onMapInitialized(MapInitializationEvent event) {

        // First we define a WMS configuration object:
        WmsLayerConfiguration wmsConfig = new WmsLayerConfiguration();
        wmsConfig.setFormat("image/jpeg");
        wmsConfig.setLayers("bluemarble");
        wmsConfig.setVersion(WmsVersion.v1_1_1);
        wmsConfig.setBaseUrl("http://apps.geomajas.org/geoserver/wms");

        // Then we define a Tile Configuration object:
        Coordinate tileOrigin = new Coordinate(mapPresenter.getViewPort().getMaximumBounds().getX(),
                mapPresenter.getViewPort().getMaximumBounds().getY());
        WmsTileConfiguration tileConfig = new WmsTileConfiguration(256, 256, tileOrigin);

        // Create the WMS layer and add it to the map:
        WmsLayer wmsLayer = injector.getWmsLayerFactory().createWmsLayer("bluemarble",
                wmsConfig, tileConfig);
        mapPresenter.getLayersModel().addLayer(wmsLayer);
    }
});</programlisting>
  </sect1>

  <sect1>
    <title>How to read a GetCapabilities file and get the list of
    layers</title>

    <para>For parsing a GetCapabilities file, we need the WmsService. This
    service must be acquired through the GIN injector:</para>

    <programlisting>// It is best to define your own injector, and make it a global static variable...
// (you need only one for your app)
WmsClientGinjector injector = GWT.create(WmsClientGinjector.class);

// Get the WMS Service:
WmsService wmsService = injector.getWmsService();

wmsService.getCapabilities("http://apps.geomajas.org/geoserver/wms", WmsVersion.v1_1_1,
        new Callback&lt;WmsGetCapabilitiesInfo, String&gt;() {

    public void onFailure(String reason) {
        Window.alert(reason);
    }

    public void onSuccess(WmsGetCapabilitiesInfo result) {
        // Get the list of layers:
        List&lt;WmsLayerInfo&gt; layers = result.getLayers(); // These are the WMS layer definitions...

        // Let's add the first layer to the map:
        WmsLayerInfo layerInfo = layers.get(0);

        WmsLayerConfiguration wmsConfig = new WmsLayerConfiguration();
        wmsConfig.setBaseUrl(urlBox.getValue());
        wmsConfig.setLayers(layerInfo.getName());

        Coordinate origin = new Coordinate(layerInfo.getBoundingBox().getX(), 
                layerInfo.getBoundingBox().getY());
        WmsTileConfiguration tileConfig = new WmsTileConfiguration(256, 256, origin);

        // Create a WMS layer and add it to the map:
        WmsLayer layer = injector.getWmsLayerFactory().createWmsLayer(layerInfo.getTitle(), 
                wmsConfig, tileConfig);
        mapPresenter.getLayersModel().addLayer(layer);

        // Make sure we enable animation for our newly add layer - it's just nicer:
        mapPresenter.getMapRenderer().setNrAnimatedLayers(mapPresenter.getLayersModel().
                getLayerCount());
    }
});</programlisting>
  </sect1>

  <sect1>
    <title>How to make cross-domain WMS requests</title>

    <para>Often your WMS server will have a different domain than the
    application you're creating. In such cases the browser will not allow
    cross-domain requests, and as a result you will most likely use a proxy
    servlet that takes care of this problem. The trick is to have the
    <code>WmsService</code> make use of your proxy servlet.</para>

    <para>For this purpose, the WmsService allows you to specify a
    <code>WmsUrlTransformer</code> object that will transform WMS request URLs
    to your liking. It can go as far as to specify different transformations
    for different types of WMS request. For example, you may want the
    GetCapabilities and GetFeatureInfo requests to make use of a proxy
    servlet, while your GetMap and GetLegendGraphic requests must remain
    untouched (GetMap and GetLegendGraphic are URLs point to images, where the
    cross-domain problem does not exist).</para>

    <para>The following example will add a proxy servlet for the
    GetCapabilities and GetFeatureInfo requests, while the other WMS requests
    are left untouched:</para>

    <programlisting>wmsService.setWmsUrlTransformer(new WmsUrlTransformer() {

    public String transform(WmsRequest request, String url) {
        switch (request) {
            case GetCapabilities:
            case GetFeatureInfo:
                return "/proxy?url=" + url;
            default:
        }
        return url;
    }
});</programlisting>
  </sect1>
</chapter>
