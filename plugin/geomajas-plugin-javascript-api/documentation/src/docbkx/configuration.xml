<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<chapter id="chapter-configuration">
  <title>Using the JavaScript API plug-in</title>

  <para>This chapter will focus on how to integrate this plug-in in different
  environments. In essence there are 2 main options to chose from:</para>

  <itemizedlist>
    <listitem>
      <para>Using the stand-alone version of this JavaScript library in
      combination with a Geomajas back-end.</para>
    </listitem>

    <listitem>
      <para>Using the JavaScript API on top of a GWT application.</para>
    </listitem>
  </itemizedlist>

  <para>Both options provide totally different ways of integrating the
  Geomajas JavaScript API within an existing architecture. Both options will
  be explained in detail below.</para>

  <section>
    <title>Stand-alone or on top of GWT?</title>

    <para>As explained above, there are 2 main ways of using this JavaScript
    API within your applications. Both provide a totally different approach to
    build and integrate Geomajas application within an existing architecture.
    As a result it is important to understand both options in order to better
    apply the reasoning on your situation.</para>

    <section>
      <title>Stand-alone JavaScript library</title>

      <para>This option is pretty straightforward as you could regard it as
      any other JavaScript library out there: make sure the browser loads the
      correct JavaScript files and CSS classes and you are
      up-and-running....except that the Geomajas server is still
      required.</para>

      <para>Remember that the JavaScript API is a wrapper around the GWT face
      or PureGWT face, both of whom make heavy use of the Geomajas server.
      Consequently this JavaScript API requires the same server to be present.
      </para>

      <para>When we say "the Geomajas server", all we mean is some server that
      provides the communication options the Geomajas back-end libraries
      provide. This means that you can use any Java based server application,
      as long as the Geomajas back-end Jars are in there somewhere, or you
      emulate the Geomajas client-server communication completely (not
      recommended).</para>

      <para>Anyway, at the heart of the stand-alone JavaScript API, there will
      be a completely empty GWT application definition. As it's completely
      empty, it does not generate any GUI whatsoever. You would typically
      start out by creating a new map and attaching it to an HTML
      element.</para>

      <example>
        <title>Add a map to the HTML page</title>

        <programlisting>var map;

function onGeomajasLoad() {
    map = Geomajas().createMap("app", "mapMain", "js-map-element");
}</programlisting>
      </example>

      <para>The line above will create a new map within the "app"
      configuration, therein searching the "mapMain" map definition and
      attaching it to a HTML element with ID="js-map-element". The "app" and
      "mapMain" parameters are defined within the server-side XML
      configuration.</para>

      <para>The method "onGeomajasLoad()" is automatically called when the
      page loads, so the above code would fetch the map configuration on load
      and then attach the map object onto the "js-map-elemen" DOM
      element.</para>

      <para>This option cuts GWT out of the equasion. Chose this approach if
      you don't want to use GWT but still want a strong GIS framework on the
      web.</para>
    </section>

    <section>
      <title>JavaScript API on top of a GWT application</title>

      <para>This option can be used in multiple ways. Basically you would
      create a GWT application with a JavaScript API. This means that you
      could walk the middle road and use a mix of Java and JavaScript, or more
      likely, you want to write a full blown GWT application, but you still
      need it to be accessible from within JavaScript (to be used in an IFrame
      of another application perhaps).</para>

      <para>This approach will have you build your application in GWT, as if
      you're using the GWT face or PureGWT face, and just have the JavaScript
      API in there for external parties that require client-side integration.
      Let it be said that the Geomajas team is always a strong proposer of
      back-end integration, as it provides all integrating within a secured
      environment, but sometimes you simply don't have that choice....</para>

      <para>After building the GWT application, the JavaScript API will be
      available for use as if it where a stand-alone JavaScript library (as in
      the previous section).</para>

      <para><remark>Read on to find out how to configure a GWT application to
      provide the JavaScript API.</remark></para>
    </section>
  </section>

  <section id="dependencies">
    <title>Configuring the JavaScript API for a GWT application</title>

    <para>When using the JavaScript API on top of a GWT application, you
    basically have to set up your GWT application and then add the JavaScript
    API to it. This means getting the correct jars on the classpath and adding
    the GWT module for the JavaScript API to the GWT compiler.</para>

    <para>Here's an example Maven configuration of getting the jars on the
    classpath (example for the GWT face):</para>

    <example>
      <title>Plug-in dependency</title>

      <programlisting language="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
    &lt;artifactId&gt;geomajas-plugin-javascript-api-gwt&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
    &lt;artifactId&gt;geomajas-plugin-javascript-api-gwt&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;classifier&gt;sources&lt;/classifier&gt;
&lt;/dependency&gt;</programlisting>
    </example>

    <para>Note that both the jars and sources jars have to be added. As always
    the GWT compiler requires the original Java code to be on the classpath in
    order to compile it to JavaScript.</para>

    <para>Next you have to actually register the JavaScript API to the GWT
    compiler. This is done by adding the JavaScript API GWT module to the
    application, by adding the following line to the application's .gwt.xml
    file (example for the GWT face):</para>

    <example>
      <title>Adding the GWT module</title>

      <para><programlisting>&lt;inherits name="org.geomajas.plugin.jsapi.gwt.JavascriptApi"/&gt;</programlisting></para>
    </example>

    <para>That's it! When building your GWT application, it will automatically
    publish it's map API to JavaScript.</para>

    <note>
      <para>The configuration in this section adds the JavaScript API for the
      GWT face to your application. The JavaScript API for the PureGWT face
      is not yet ready.</para>
    </note>
  </section>

  <section>
    <title>What can the API do?</title>

    <para>Ofcourse, this API is a subset of the shared functionality of the
    GWT face and PureGWT face. It is after all a wrapper around the Java API.
    Therefore, it will not exceed the Java functionalities. Having said that,
    the API is still pretty extensive. It provides the most access to the map,
    the layer model, the viewport, the features, the geometries, etc. It also
    provides the most important events (map initialization event, feature
    selection events, ...).</para>

    <para>On top of the default map API, more plug-ins are and will become
    available for the JavaScript API. The editing plug-in for example also has
    a JavaScript API which extends this API (providing rich geometry editing
    services).</para>

    <tip>
      <para>For a detailed list of all classes and methods available, have a
      look at the JavaScriptDoc (those should be available at the plug-in page
      on the Geomajas website).</para>
    </tip>
  </section>
</chapter>
