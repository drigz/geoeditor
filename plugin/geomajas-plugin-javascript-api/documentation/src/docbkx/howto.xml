<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<chapter id="chapter-howto">
  <title>How-to</title>

  <para>This chapter provides a series of examples on how to use the
  JavaScript API to accomplish different goals. Many of the examples in here
  are also available in the showcase application that comes with this
  plug-in.</para>

  <sect1>
    <title>How to add a map to the HTML page</title>

    <para>Adding a map when the page loads, can be done through the following
    code:</para>

    <example>
      <title>Initializing a map when Geomajas loads</title>

      <para><programlisting>var map;

function onGeomajasLoad() {
    map = Geomajas().createMap("app", "mapMain", "js-map-element");
}</programlisting></para>
    </example>

    <para>The "onGeomajasLoad" method is called automatically after Geomajas
    has loaded. This is the perfect time to add a map to the HTML page. The
    paremeters are defined as follows:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>"app"</emphasis>: The XML application configuration as
        defined in the Geomajas back-end configuration.</para>
      </listitem>

      <listitem>
        <para><emphasis>"mapMain"</emphasis>: The map definition as defined in
        the Geomajas back-end configuration.</para>
      </listitem>

      <listitem>
        <para><emphasis>"js-map-element"</emphasis>: The DOM element wherein
        to place the map. It is best to make sure this element has a fixed
        width and height.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>How to retrieve the list of layers</title>

    <para>It is important to understand that when the Geomajas client loads,
    the map is absolutely empty. This is due to the fact that Geomajas fetches
    it's map configuration from the server. When the Geomajas client loads,
    the first action it undertakes is to fetch the correct map configuration,
    and only when it receives this from the server, can the map initialize
    itself. Only then are the layers available.</para>

    <para>Fortunately the map will fire an event when it's configuration is
    loaded. Actually it fires an event every time it's configuration changes.
    It might be the case that during run-time, the back-end map configuration
    changes, so this map "configuration change event" might occur multiple
    times.</para>

    <para>The following example shows how to react to this event:</para>

    <example>
      <title>Reacting to the map initialization event</title>

      <programlisting>var registration = map.getEventBus().addLayersModelChangedHandler(function(event) {
    for (var i = 0; i &lt; map.getLayersModel().getLayerCount(); i++) {
        var layer = map.getLayersModel().getLayerAt(i);
        // Do something with the layer: layer.getTitle()...
    }
});</programlisting>
    </example>

    <para>Note first of all that the map has a central EventBus for events.
    This is where such event handlers can be registered. The map also has a
    "LayersModel" which represents the list of layers and which provides
    methods that operate on layers.</para>

    <para>Also note that registering handlers (of any event type), will always
    return a registration to that handler. Through this registration it is
    possible to remove the handler from the EventBus again:</para>

    <example>
      <title>Removing a handler registration</title>

      <programlisting>registration.removeHandler();</programlisting>
    </example>
  </sect1>

  <sect1>
    <title>How to check for client-server communication</title>

    <para>Whenever the Geomajas client starts and stops talking to the server,
    it fires events. It is possible to catch these events to, for example,
    show some busy state within the application.</para>

    <example>
      <title>Reacting to client-server communication</title>

      <para><programlisting>var handlerRegistration1 = Geomajas().addDispatchStartedHandler(function(event){
    // Client-server communication starts. Quickly, do something!
});

var handlerRegistration2 = Geomajas().addDispatchStoppedHandler(function(event){
    // Client-server communication stops. Quickly, do something!
});</programlisting></para>
    </example>

    <para>Whenever you register an event handler, a registration is returned.
    If at any time, the event handler is not needed anymore, you can cleanly
    remove it again through the following statement:</para>

    <example>
      <title>Removing handler registrations</title>

      <programlisting>handlerRegistration1.removeHandler();
handlerRegistration2.removeHandler();</programlisting>
    </example>
  </sect1>

  <sect1>
    <title>How to change cursors on the map</title>

    <para>It is possible to change the cursor on the map, either trough
    default cursors or an image:</para>

    <example>
      <title>Applying cursors</title>

      <programlisting>map.setCursor('default');
map.setCursor('images/metal-cursor.cur');</programlisting>
    </example>
  </sect1>

  <sect1>
    <title id="how-to-search-features">How to search features in a
    layer</title>

    <para>This section will describe 2 methods for searching features. Every
    map has a FeatureSearchService, which is used for feature
    retrieval.</para>

    <sect2>
      <title>Searching features by ID</title>

      <para>In the example above, we assume that there already is a map
      present, and that this map has already initialized itself. By
      initialized, we mean that is has already fetched it's configuration from
      the server (otherwise layers are not available).</para>

      <para>In the example below, we search for a feature with ID
      "feature-ID-1" within the second layer of the map. Note that an array is
      expected when searching features by ID, so that multiple features can be
      looked up in a single request. When the answer returns from the server,
      a callback is executed with a featureHolder that contains (hopefully)
      the requested features.</para>

      <example>
        <title>Searching features by ID</title>

        <programlisting>var layer = map.getLayersModel().getLayerAt(1); // make sure this is a vector layer!
var service = map.getFeatureSearchService();

service.searchById(layer, ["feature-ID-1"], function(featureHolder){
    if (featureHolder == null) {
        // Feature "feature-ID-1" could not be found....
    } else {
        // Let's see what we have...
        var feature = featureHolder.getFeatures()[0];
    }
});</programlisting>
      </example>
    </sect2>

    <sect2>
      <title>Searching features using bounds</title>

      <para>Another option is to search for features within a certain bounding
      box. In the example below, the map's current bounding box is used to
      search features in. As in the previous example, a callback will be
      executed when the answer from the server returns.</para>

      <example>
        <title>Searching features by bounds</title>

        <programlisting>var layer = map.getLayersModel().getLayerAt(1); // make sure this is a vector layer!
var bounds = map.getViewPort().getBounds(); // Get the current map bounds
var service = map.getFeatureSearchService();

service.searchInBounds(layer, bounds, function(featureHolder) {
    if (featureHolder == null) {
        // "No features found...
    } else {
        for (var i=0; i &lt; featureHolder.getFeatures().length; i++) {
            var feature = featureHolder.getFeatures()[i];
            // Quickly, do something!
        }
    }
});</programlisting>
      </example>
    </sect2>
  </sect1>

  <sect1>
    <title>How to use existing map controllers</title>

    <para>The top Geomajas service has the possibility to create instances of
    some of the default controllers that the GWT faces provide. These
    controllers can then be applied onto the map:</para>

    <example>
      <title>Using pre-defined map controllers</title>

      <programlisting>var mapController = Geomajas().createMapController(map, id);
map.setMapController(mapController);</programlisting>
    </example>

    <para>The default controllers are created using a pre-defined ID. This is
    the list of supported ID's:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>'PanMode'</emphasis>: The default navigation
        controller. Allows to pan by dragging and zoom in and out using the
        mouse wheel.</para>
      </listitem>

      <listitem>
        <para><emphasis>'MeasureDistanceMode'</emphasis>: Controller that
        let's the user measure distances.</para>
      </listitem>

      <listitem>
        <para><emphasis>'FeatureInfoMode'</emphasis>: Controller that fetches
        feature information by clicking on the map.</para>
      </listitem>

      <listitem>
        <para><emphasis>'SelectionMode'</emphasis>: Selection controller that
        supports multiple selection. Supports selection by rectangle by
        dragging on the map, and also supports additional selection through
        the shift button.</para>
      </listitem>

      <listitem>
        <para><emphasis>'SingleSelectionMode'</emphasis>: Selection controller
        that only allows a single feature to be selected at any given
        time.</para>
      </listitem>

      <listitem>
        <para><emphasis>'EditMode'</emphasis>: A generic editing controller.
        Works through the right mouse button. Note that an editing plug-in is
        available with far more powerfull editing tools.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>How to create custom map controllers</title>

    <para>It is also possible to create a custom controller to react on mouse
    events from the map. Next to the default mouse events, it is also possible
    to attach handlers for activation and deactivation of your controller. Let
    us first analyze the creation of a new custom controller that picks up on
    the location of the mouse:</para>

    <example>
      <title>Creating custom map controllers</title>

      <programlisting>// Create the new MapController:
var mapController = new org.geomajas.jsapi.controller.MapController();

// Apply handlers for Mouse Events:
mapController.setMouseMoveHandler(function(event) {
    // Screen space: pixel position
    var screenLocation = mapController.getLocation(event, "screen");

    // World space: real-world location
    var worldLocation = mapController.getLocation(event, "world");

    // Do something with these locations...
    // worldLocation.getX(), worldLocation.getY(), ...
});
mapController.setMouseOverHandler(function(event) {
    // Do something useful...
});
mapController.setMouseOutHandler(function(event) {
    // Do something useful...
});
mapController.setDownHandler(function(event) {
    // Do something useful...
});
mapController.setUpHandler(function(event) {
    // Do something useful...
});</programlisting>
    </example>

    <para>Now that we have created our controller, we might also want to be
    notified of the controllers' activation and deactivation events. On
    deactivation we might have to clean up the controller.</para>

    <example>
      <title>Map controller activation/deactivation</title>

      <programlisting>// Apply activation (for init) and deactivation (for cleanup) handlers:
mapController.setActivationHandler(function() {
    // on controller activation: initialize something.
});
mapController.setDeactivationHandler(function() {
    // on controller deactivation: clean up.
});

// Apply the MapController on the map:
map.setMapController(mapController);</programlisting>
    </example>

    <para>The above code will set the activation and deactivation handlers and
    finally apply the controller on the map. In order to revert to the
    fallback controller on the (which by default is a navigation controller),
    set a "null" controller on the map:</para>

    <example>
      <title>Switching to the fallback map controller</title>

      <programlisting>map.setMapController(null);</programlisting>
    </example>
  </sect1>

  <sect1>
    <title>How to navigate the map through code</title>

    <para>Navigating the map through JavaScript code requires the ViewPort.
    The ViewPort keeps track of current position and scale and provides
    methods for navigation. This section provides a few examples of how to use
    the ViewPort.</para>

    <sect2>
      <title>How to translate the map</title>

      <para>Translating (a.k.a. panning) the map is done by first acquiring
      the current position, than adding up the translation deltas and finally
      applying the new position again:</para>

      <example>
        <title>Translating the map (panning)</title>

        <programlisting>var position = map.getViewPort().getPosition();
var newX = position.getX() + distanceX;
var newY = position.getY() + distanceY;
var newPosition = new org.geomajas.jsapi.spatial.Coordinate(newX, newY);
map.getViewPort().applyPosition(newPosition);</programlisting>
      </example>
    </sect2>

    <sect2>
      <title>How to zoom in and out</title>

      <para>Zooming in or out is done by first acquiring the current scale and
      than multiplying or dividing it by some scale delta:</para>

      <example>
        <title>Zooming in and out</title>

        <programlisting>var scale = map.getViewPort().getScale();
map.getViewPort().applyScale(scale * delta);</programlisting>
      </example>

      <para>Applying a bigger scale value will zoom in, applying a smaller
      scale value will zoom out.</para>
    </sect2>

    <sect2>
      <title>How to apply a new bounding box</title>

      <para>Applying a new bounding box is pretty straightforward. Just create
      a new bounding box with the required values (position) and apply it on
      the ViewPort:</para>

      <example>
        <title>Applying a new bounding box</title>

        <programlisting>var bbox = new org.geomajas.jsapi.spatial.Bbox(x, y, width, height);
map.getViewPort().applyBounds(bbox);</programlisting>
      </example>
    </sect2>
  </sect1>

  <sect1>
    <title>How to select features, or connect to selection events</title>

    <para>This section will tackle some of the typical issues regarding
    feature selection, deselection and how to be notified of feature selection
    events.</para>

    <sect2>
      <title>How to select or deselect features</title>

      <para>In order to select a feature, you must first acquire it. The
      following example therefore will select a feature after searching for it
      on the back-end. If you already have the feature available in your
      JavaScript code, there is no need to search it again.</para>

      <example>
        <title>Selecting features</title>

        <programlisting>// Get the layer wherein to search and select a feature:
var layer = map.getLayersModel().getLayer("clientLayerCountries");

// Search a feature by ID and select it once we have it:
map.getFeatureSearchService().searchById(layer, [id], function(featureHolder) {
    layer.selectFeature(featureHolder.getFeatures()[0]);
});</programlisting>
      </example>

      <para>For more information on searching for features, see "<link
      linkend="how-to-search-features">How to search features in a
      layer</link>". The key in this example is that you select features
      through their layer.</para>

      <para>In order to deselect the feature again, there are 2 options:
      deselect the specific feature or deselect all features within the
      layer:</para>

      <example>
        <title>Deselecting features</title>

        <programlisting>layer.deselectFeature(feature);

// or

layer.clearSelectedFeatures();</programlisting>
      </example>

      <para>It might also be of interest to know wheter or not a specific
      feature is selected or not. This you can ask:</para>

      <example>
        <title>Is a feature selected?</title>

        <programlisting>var selected = eval(layer.isFeatureSelected(id).toString()); // Boolean to boolean conversion...</programlisting>
      </example>

      <para>Note that the feature ID is used to inquire about the feature
      selection state. Also the eval method of the toString method is used to
      convert the Boolean to a JavaScript boolean. This is a clumsy conversion
      that is the result of the Java to JavaScript conversion within the GWT
      client.</para>
    </sect2>

    <sect2>
      <title>How to be notified of feature selection events</title>

      <para>Whenever a feature is selected or deselected on the map (either
      through code or through the user who uses the SelectionController on the
      map), a feature selection or deselection event is fired. It is possible
      to register handlers to these events in order to catch them.</para>

      <example>
        <title>Catching feature selection events</title>

        <programlisting>var registration = map.getEventBus().addFeatureSelectionHandler(function(event) {
    var feature = event.getFeature();
    // The feature is selected. Do something with it...
}, function(event) {
    var feature = event.getFeature();
    // The feature is deselected. Do something with it...
});</programlisting>
      </example>

      <para>The maps central EventBus stores all handlers and fires all
      events. For feature selection, you may have noticed that both the
      selection and deselection events are registered at once.</para>

      <para>Also note that registering handlers (of any event type), will
      always return a registration to that handler. Through this registration
      it is possible to remove the handler from the EventBus again:</para>

      <example>
        <title>Removing the event handler</title>

        <programlisting>registration.removeHandler();</programlisting>
      </example>
    </sect2>
  </sect1>
</chapter>
