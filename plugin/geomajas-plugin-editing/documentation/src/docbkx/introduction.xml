<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-introduction">
  <title>Introduction</title>

  <para>This plug-in provides a set of services and utilities for visually
  editing geometries on the map within a GWT environment. It uses the Geomajas
  Geometry Project as the base geometry type, and the
  <code>MapController</code> definition from the Geomajas Common GWT face
  library. On top of the visual geometry editing, this plug-in also provides
  services for snapping, splitting and merging.</para>

  <sect1>
    <title>Model-view-controller</title>

    <para>In essence the editing follows the tried and tested
    Model-View-Controller principle:</para>

    <itemizedlist>
      <listitem>
        <para>Model: The central <code>GeometryEditService</code>. It keeps
        track of the location and status of all vertices and edges of the
        geometry being edited.</para>
      </listitem>

      <listitem>
        <para>View: The <code>GeometryEditService</code> will fires events
        that are being picked up by a specific renderer. Any change in the
        shape of the geometry or the status of it's vertices/edges will be
        caught and visually displayed on the map.</para>
      </listitem>

      <listitem>
        <para>Controller: A series of handlers will execute methods in the
        <code>GeometryEditService</code>, based upon user interaction on the
        map.</para>

        <note>
          <para>As the rendering is face specific, the focus has first gone to
          the GWT face. An implementation for the PureGWT face will follow
          later.</para>
        </note>
      </listitem>
    </itemizedlist>

    <para>The renderer is one example of a listener to the many events that
    the <code>GeometryEditService</code> fires, but essentially anyone can
    listen to those events. If you need to react to any change in a geometry's
    shape, just add the correct handler.</para>
  </sect1>

  <sect1>
    <title>The GeometryIndex concept</title>

    <para>Before trying to figure out how the <code>GeometryEditService</code>
    works, it is important to understand the <code>GeometryIndex</code>
    concept. A <code>GeometryIndex</code> is an index within a geometry that
    points to a single vertex, edge or sub-geometry. All operations within the
    <code>GeometryEditService</code> operate on a list such
    <code>GeometryIndices</code>.</para>

    <para>Take for example the "move" operation. This operation will move the
    given <code>GeometryIndex</code> to the specified location. This operation
    is used when the user drags a vertex around on the map, but this operation
    could also be used to let the user drag an interior ring within a polygon,
    or an entire LineString within a MultiLineString, or event the whole
    geometry.</para>

    <para>The GeometryIndex is based on the internal structure of the
    geometry, which may contain 4 or more levels:</para>

    <orderedlist>
      <listitem>
        <para>Geometry collection level: this is the highest structural level
        for geometry collections: multipolygon, multilinestring or arbitrary
        geometry collections. In theory a geometry collection may contain
        other geometry collections, but this is rarely encountered.</para>
      </listitem>

      <listitem>
        <para>Geometry level: this is the level of a basic geometry like
        polygon, linestring or point</para>
      </listitem>

      <listitem>
        <para>Ring level: for a polygon, this is the level of the linear
        rings. There is usually an exterior ring (boundary), but there may
        also be additional interior rings (holes)</para>
      </listitem>

      <listitem>
        <para>Vertex or edge level: this is the level of the individual
        vertices and edges. A single edge connects 2 vertices.</para>
      </listitem>
    </orderedlist>

    <para>The elements at each level have a fixed ordering, which makes it
    possible to uniquely determine such an element by its order at each level
    of the structural tree. This combination of order numbers, together with a
    type to distinguish between edges, vertices or higher level structures
    (which we generally call geometries) forms the
    <code>GeometryIndex</code>.</para>

    <para>Lets give some examples to clarify this. The following table shows
    at the left column a geometry in WKT format with a highlighted section and
    the corresponding <code>GeometryIndex</code>. The GeometryIndex is an
    array of integers combined with a type. For edge, the type is
    <code>edge</code>, for vertex it is <code>vertex</code> and for all other
    structures it is <code>geometry</code>. The last row contains a
    multipolygon with 2 polygons. The highlighted section is a couple of
    points that determines an edge of the interior ring of the first polygon.
    The indices are 0 (for the first polygon), 1 (for the interior ring) and 2
    for being the 3rd edge of this ring (counting starts with index 0 in all
    cases).</para>

    <table>
      <title>Geometry index samples</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">WKT</entry>

            <entry align="center">Geometry index</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>POINT(<emphasis role="bold">0 0</emphasis>)</entry>

            <entry>[0], type = vertex</entry>
          </row>

          <row>
            <entry>LINESTRING (30 10, <emphasis role="bold">10 30</emphasis>,
            40 40)</entry>

            <entry>[1], type = vertex</entry>
          </row>

          <row>
            <entry>LINESTRING (<emphasis role="bold">30 10</emphasis>, 10 30,
            <emphasis role="bold">40 40</emphasis>)</entry>

            <entry>[2], type = edge</entry>
          </row>

          <row>
            <entry>POLYGON ((35 10, 10 20, 15 40, 45 45, 35 10), <emphasis
            role="bold">(20 30, 35 35, 30 20, 20 30)</emphasis>)</entry>

            <entry>[1], type = geometry</entry>
          </row>

          <row>
            <entry>POLYGON ((35 10, 10 20, 15 40, 45 45, 35 10), (20 30, 35
            35, <emphasis role="bold">30 20</emphasis>, 20 30))</entry>

            <entry>[1,2], type = vertex</entry>
          </row>

          <row>
            <entry>MULTIPOLYGON (((35 10, 10 20, 15 40, 45 45, 35 10), (20 30,
            35 35, <emphasis role="bold">30 20, 20 30</emphasis>)),((35 10, 10
            20, 15 40, 45 45, 35 10)))</entry>

            <entry>[0,1,2], type = edge</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1>
    <title>The central services</title>

    <para>There are 3 central services that help in the editing process. All
    three have a very distinct responsibility:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>GeometryEditService</emphasis>: Defines the editing
        workflow and the basic operations (with undo/redo) that are supported.
        Also allows to add handlers to all events.</para>
      </listitem>

      <listitem>
        <para><emphasis>GeometryIndexService</emphasis>: This service defines
        operations for creating and manipulating GeometryIndices. It also
        supports retrieving information based upon a certain geometry and
        index. For example what are the adjacent vertices to a certain edge
        within a given geometry?</para>
      </listitem>

      <listitem>
        <para><emphasis>GeometryIndexStateService</emphasis>: Keeps track of
        the state of all indices that make up the geometry being edited. It
        allows for selecting/deselecting, enabling/disabling, highlighting,
        etc any vertices/edges/sub-geometries during the editing process. This
        state can then be used by the controllers. For example, a controller
        could allow only selected vertices to be dragged by the user.</para>
      </listitem>
    </itemizedlist>

    <para>There are more services then the 3 mentioned above such as a
    <code>SnapService</code>, <code>GeometryMergeService</code> and
    <code>GeometrySplitService</code>, but those just add more functionality
    to the basic set that the 3 above already provide.</para>
  </sect1>
</chapter>
