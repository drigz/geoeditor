<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-java-configuration">
  <title>Java/GWT Editing API</title>

  <section>
    <title>Maven configuration</title>

    <para>In order to use this plug-in in combination with the GWT face, the
    following Maven dependency is required:</para>

    <xi:include href="listing/EditingDependency.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />
  </section>

  <section>
    <title>the GeometryEditor object for the GWT face</title>

    <para>Before going deeper into the inner workings of the different
    services and how they work together, we need to explain the
    GeometryEditor. This is the top level editing object that makes all of the
    other services work together. It has a GeometryEditService, a renderer for
    the map, a SnapService, and a registry for controller on the map.</para>

    <para>This is where you start when trying to edit geometries within the
    GWT. Because the rendering is face specific, this object too is face
    specific. A GeometryEditor can simply be constructed using a map:</para>

    <example>
      <title>Constructing a GeometryEditor</title>

      <programlisting>GeometryEditor editor = new GeometryEditor(mapWidget);</programlisting>
    </example>
  </section>

  <section>
    <title>The GeometryEditService</title>

    <para>Central service for all operations concerning the geometry editing
    process. This process should work together with a set of controllers on
    the map that execute methods from this service after which events are
    fired for a renderer to act upon. This service makes use of the
    <code>GeometryIndexService</code> to identify sub-geometries, vertices and
    edges. All operations work on a set of such indices. This allows for great
    flexibility in the operations that can be performed on geometries.</para>

    <section>
      <title>Geometry edit workflow</title>

      <para>Editing a geometry comes down to starting the editing process,
      applying some operations and then stopping the process again. Starting
      and stopping happens through the <code>start</code> and
      <code>stop</code> methods. Know also that operations onto the geometry
      really do apply on the same geometry that was passed with the
      <code>start</code> method. In other words, this service changes the
      original geometry. If you want to support some roll-back functionality
      within your code, make sure to create a clone of the geometry before
      starting this edit service.</para>
    </section>

    <section>
      <title>GeometryEditState</title>

      <para>At any time during the editing process, the
      <code>GeometryEditService</code> has a general state that tells you
      what's going on. This state is defined in the
      <code>GeometryEditState</code>. Currently there are 3 possible states
      for the editing process to be in:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>IDLE</emphasis>: The default state. </para>
        </listitem>

        <listitem>
          <para><emphasis>INSERTING</emphasis>: The user is currently
          inserting new points into the geometry. The
          <code>GeometryEditService</code> has an "insertIndex" (of the type
          <code>GeometryIndex</code>), that points to the next suggested
          insert location. The controllers pick up on this index to insert
          points (or edges, or geometries).</para>
        </listitem>

        <listitem>
          <para><emphasis>DRAGGING</emphasis>: The user is currently dragging
          a part of the geometry. The <code>GeometryIndexStateService</code>
          can select vertices/edges/sub-geometries, which can then be dragged
          around.</para>
        </listitem>
      </itemizedlist>

      <para>As you may have noticed from the descriptions, the
      GeometryEditState is used mainly within the controllers that operate on
      the map. An insert controller will only be active when the edit state is
      "INSERTING". Likewise a drag controller will only be active when the
      edit state is "DRAGGING".</para>
    </section>
  </section>

  <section>
    <title>Using snapping while editing</title>

    <para>The editing plug-in has support for snapping while inserting or
    dragging. The controllers are equipped with a <code>SnapService</code>
    which can convert the mouse event locations into snapped locations, before
    they are passed to the <code>GeometryEditService</code> for operation
    execution.</para>

    <para>The SnapService works through a series of rules that need to be
    active. Without any snapping rules, the SnapService will no snap. Adding
    snapping rules, goes through the "addSnappingRule" method, and requires
    the following parameters:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>algorithm</emphasis>: The snapping algorithm to be
        used. For example, snap to end-points only, or also to edges,
        or...</para>
      </listitem>

      <listitem>
        <para><emphasis>sourceProvider</emphasis>: The provider of target
        geometries where to snap. For example, snap to features of a
        layer.</para>
      </listitem>

      <listitem>
        <para><emphasis>distance</emphasis>: The maximum distance to bridge
        during snapping. Expressed in the unit of the map CRS.</para>
      </listitem>

      <listitem>
        <para><emphasis>highPriority</emphasis>: High priority means that this
        rule will always be executed. Low priority means that if a previous *
        snapping algorithm has found a snapping candidate, this algorithm will
        not be executed anymore.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Merging geometries</title>

    <para></para>
  </section>

  <section>
    <title>Splitting geometries</title>

    <para></para>
  </section>
</chapter>
