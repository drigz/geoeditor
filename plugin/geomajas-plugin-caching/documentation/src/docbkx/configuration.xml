<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-configuration">
  <title>Configuration</title>

  <para>The configuration of the caching plug-in covers many aspects.</para>

  <para><itemizedlist>
      <listitem>
        <para>Use pipelines which include caching</para>
      </listitem>

      <listitem>
        <para>Configure the cache implementations and configurations to use
        for each layer/category combination</para>
      </listitem>

      <listitem>
        <para>Configure the spatial index implementation and configuration for
        each layer/category combination</para>
      </listitem>
    </itemizedlist></para>

  <section>
    <title>Dependencies</title>

    <para>Make sure you include the correct version of the plug-in in your
    project. Use the following excerpt (with the correct version) in the
    dependencyManagement section of your project:</para>

    <informalexample>
      <programlisting> &lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
    &lt;artifactId&gt;geomajas-plugin-caching-all&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;type&gt;pom&lt;/type&gt;
    &lt;scope&gt;import&lt;/scope&gt;
&lt;/dependency&gt;
</programlisting>
    </informalexample>

    <para>If you are using geomajas-dep, this includes the latest released
    version of the caching plug-in (at the time of publishing of that
    version). If you want to overwrite the caching plug-in version, make sure
    to include this excerpt <emphasis>before</emphasis> the geomajas-dep
    dependency.</para>

    <para>You can now include the actual dependency without explicit
    version.</para>

    <informalexample>
      <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt; 
    &lt;artifactId&gt;geomajas-plugin-caching&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
    </informalexample>
  </section>

  <section id="conf">
    <title>Pipeline configuration</title>

    <para>To make sure the caching is actually used, you have to assure that
    the cached pipelines are used in the cases where you want the cache to be
    enabled.</para>

    <para>The easiest configuration is to enable the caches to be used by
    default. This can be done by including the file<informalexample>
        <programlisting>classpath:org/geomajas/plugin/caching/DefaultCachedPipelines.xml</programlisting>
      </informalexample></para>

    <para>in your web.xml file.</para>

    <para>Alternatively you can configure for each layer individually which
    pipelines should be used.</para>

    <para>The following cached pipelines exist (bean names):</para>

    <para><itemizedlist>
        <listitem>
          <para>PIPELINE_SAVE_OR_UPDATE_ONE_CACHED: pipeline for the
          saveOrUpdate() on a vector layer.</para>
        </listitem>

        <listitem>
          <para>PIPELINE_GET_FEATURES_CACHED: pipeline for getting features
          from a vector layer.</para>
        </listitem>

        <listitem>
          <para>PIPELINE_GET_BOUNDS_CACHED: pipeline to determine layer
          bounds.</para>
        </listitem>

        <listitem>
          <para>PIPELINE_GET_VECTOR_TILE_CACHED: pipeline to get a tile for a
          vector layer.</para>
        </listitem>

        <listitem>
          <para>PIPELINE_GET_VECTOR_TILE_NON_CACHED: pipeline to get a tile
          for a vector layer without caching, so the original definition
          before caching.</para>
        </listitem>
      </itemizedlist>You can set a specific pipeline using a configuration
    like this:</para>

    <example>
      <title>Applying the cached pipeline for getVectorTile() on
      myLayer</title>

      <programlisting>&lt;bean class="org.geomajas.service.pipeline.PipelineInfo"&gt;
    &lt;property name="pipelineName"&gt;
        &lt;util:constant static-field="org.geomajas.service.pipeline.PipelineCode.PIPELINE_GET_VECTOR_TILE"/&gt;
    &lt;/property&gt;
    &lt;property name="layerId" value="myLayer" /&gt;
    &lt;property name="delegatePipeline" ref="PIPELINE_GET_VECTOR_TILE_CACHED" /&gt;
&lt;/bean&gt;</programlisting>
    </example>

    <para></para>
  </section>

  <section id="cache-conf">
    <title>Cache configuration</title>

    <para>Cache configuration can be configured individually for each layer
    and cache category (which more or less matches type of object). This is
    done using the <code>CacheServiceInfo</code> object. As you can see in
    listing <xref linkend="CacheServiceInfoSample" /> you can define three
    properties<itemizedlist>
        <listitem>
          <para><emphasis>layerId</emphasis>: the layer for which this
          configuration applies.</para>
        </listitem>

        <listitem>
          <para><emphasis>category</emphasis>: the cache category for which
          this configuration applies. This is always in instance of the
          <code>CacheCategory</code> class.</para>
        </listitem>

        <listitem>
          <para><emphasis>cacheFactory</emphasis>: the factory which should be
          used to create cache instances. This is a bean of type CacheFactory
          which is responsible for creating cache instances.</para>
        </listitem>
      </itemizedlist></para>

    <xi:include href="listing/CacheServiceInfoSample.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The layerId and category properties are not required to be set. This
    can be used to set default caches to be used. When searching the
    configuration for a layer/category combination, the following search order
    is used.<orderedlist>
        <listitem>
          <para>matching layerId and matching category</para>
        </listitem>

        <listitem>
          <para>matching layerId and null category</para>
        </listitem>

        <listitem>
          <para>matching category and null layerId</para>
        </listitem>

        <listitem>
          <para>null layerId and null category</para>
        </listitem>
      </orderedlist></para>

    <para>The properties are null when no value is specified. If the
    application context contains more than one bean matching bean (for each of
    the lines above) the last definition is used.</para>

    <para>As an example you could use this mechanism to disable the bounds
    caching using the following configuration:</para>

    <example>
      <title>Disable caching for SVG and VML.</title>

      <programlisting>&lt;bean class="org.geomajas.plugin.caching.service.CacheServiceInfo"&gt;
    &lt;property name="category"&gt;
        &lt;util:constant static-field="org.geomajas.plugin.caching.service.CacheCategory.BOUNDS"/&gt;
    &lt;/property&gt;
    &lt;property name="cacheFactory"&gt;
        &lt;bean class="org.geomajas.plugin.caching.cache.NoCacheCacheFactory" /&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</programlisting>
    </example>

    <para>The configuration which applies still depends on the CacheFactory
    which is in use.</para>

    <section id="cache-default">
      <title>Default caches</title>

      <para>The default cache configuration is show in listing <xref
      linkend="DefaultInfinispanConfiguration" />. It uses Infinispan for the
      caching and builds individual caches for each of the categories. It has
      the following behaviour:</para>

      <para><itemizedlist>
          <listitem>
            <para>SVG/VML cache: store 512 object in each.</para>
          </listitem>

          <listitem>
            <para>bounds cache: store up to 512 bounds.</para>
          </listitem>

          <listitem>
            <para>feature cache: store up to 512 query results.</para>
          </listitem>

          <listitem>
            <para>raster cache: store 64 items in memory based on a LRU (least
            recently used) algorithm. Additional items are passivated to disk.
            Items stay cached for a week after last use.</para>
          </listitem>

          <listitem>
            <para>rebuild cache: store up to 2048 items in memory based on a
            LRU (least recently used) algorithm. Additional items are
            passivated to disk. Items stay cached for 48 hours after last
            use.</para>
          </listitem>
        </itemizedlist></para>

      <xi:include href="listing/DefaultInfinispanConfiguration.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>You can configure the directory where the passivated cache objects
      are stored using the geomajasCacheLocation property. This could for
      example be done by passing something like
      -DgeomajasCacheLocation=/var/geomajas/cache as startup parameter to your
      web container or application server.</para>

      <para>When the variable is not set, the ${geomajasCacheLocation}will be
      interpreted as ${java.io.tmpdir}/geomajas/cache. So the files will be
      placed in your systems temporary directory. Note that this can cause
      conflicts when starting more than one Geomajas instance on a
      system.</para>
    </section>

    <section>
      <title>Infinispan caches</title>

      <para>One of the caching services which is provided out of the box uses
      Infinispan as the caching library.</para>

      <para>When using the Infinispan cache factory, the factory itself
      contains exactly one Infinispan CacheManager. Each manager can itself
      contain multiple caches. You can configure a default set of caches (one
      for each category) using a CacheInfo bean. Additional sets of caches can
      also be defined using further CacheInfo beans which are then referred to
      in the layer configuration.</para>

      <para>To use Infinispan for the caches, you have to set the Infinispan
      cache factory. As mentioned earlier, this can be done specifically per
      layer and/or cache category. The example below shows a configuration
      using an Infinispan configuration file (infinispanConfiguration.xml) and
      a configuration which is used when no layer specific configuration
      exists (in this case, the actual default configuration).</para>

      <xi:include href="listing/CacheFactorySample.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>The Infinispan configuration file is searched on the class path
      (and if not found there, on the file system). This file can contain both
      a default configuration and named configurations. To use a named
      configuration, use a configuration as mentioned below. In all other
      cases, the default configuration is extended with the additional
      settings provided by you.</para>

      <xi:include href="listing/CacheNamedSample.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>In the CacheInfo beans contains a cache configuration per
      category. For straightforward configurations, you can use the
      SimpleInfinispanCacheInfo bean. This allows you to set the following
      cache parameters:</para>

      <itemizedlist>
        <listitem>
          <para>maxEntries: maximum number of entries which are allowed in the
          cache. This should be a power of two (it is rounded up to the next
          power of two if it isn't).</para>
        </listitem>

        <listitem>
          <para>evictionStrategy: the eviction strategy being the algorithm
          used to remove items from the cache memory.</para>
        </listitem>

        <listitem>
          <para>evictionWakeUpInterval: interval in milliseconds to invoke the
          eviction thread. Use -1 if you don't want the eviction thread to be
          used.</para>
        </listitem>

        <listitem>
          <para>expiration: period (in minutes) that a cache entry is
          considered valid since last use. When a cache entry has not been
          used longer, it will be removed from the cache. This applies to both
          in-memory items and passivated items and is the way to limit the
          amount of disk space used for the second level cache. Using -1 means
          that items never expire.</para>
        </listitem>

        <listitem>
          <para>isolationLevel: transaction isolation level for this
          cache.</para>
        </listitem>

        <listitem>
          <para>level2CacheLocation: location on disk for the second level
          cache. Should point to a directory. The directory is created if it
          did not exist. The location can start with a property reference. If
          a property reference is used but the property does not exist, the
          temporary directory followed by "/geomajas/cache" is used as
          property value.</para>
        </listitem>
      </itemizedlist>

      <para>More details about the behaviour of these settings can be found in
      the Infinispan documentation.</para>

      <xi:include href="listing/CacheSimpleSample.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>You can explicitly turn off caching for a category as in the
      example below. Alternatively, not mentioning a category in the
      configuration will also switch off caching for that category.</para>

      <xi:include href="listing/CacheOffSample.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <para>You can also determine at layer level to use a specific set of
      caches for each category.</para>

      <para>This can be configured inside the LayerInfo object as shown in the
      example below.</para>

      <xi:include href="listing/CacheLayerSample.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />
    </section>
  </section>

  <section id="si-config">
    <title>Spatial index configuration</title>

    <para>The spatial index to be used while caching can be configured
    individually for each layer and cache category. This is done using
    <code>CacheIndexInfo</code> objects. As you can see in listing <xref
    linkend="CacheIndexInfoSample" /> you can define three
    properties<itemizedlist>
        <listitem>
          <para><emphasis>layerId</emphasis>: the layer for which this
          configuration applies.</para>
        </listitem>

        <listitem>
          <para><emphasis>category</emphasis>: the cache category for which
          this configuration applies. This is always in instance of the
          <code>CacheCategory</code> class.</para>
        </listitem>

        <listitem>
          <para><emphasis>cacheIndexFactory</emphasis>: the factory which
          should be used to create spatial index instances. This is a bean of
          type CacheIndexFactory which is responsible for creating cache
          instances.</para>
        </listitem>
      </itemizedlist></para>

    <xi:include href="listing/CacheIndexInfoSample.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The layerId and category properties are not required to be set. This
    can be used to set default caches to be used. When searching the
    configuration for a layer/category combination, the following search order
    is used.<orderedlist>
        <listitem>
          <para>matching layerId and matching category</para>
        </listitem>

        <listitem>
          <para>matching layerId and null category</para>
        </listitem>

        <listitem>
          <para>matching category and null layerId</para>
        </listitem>

        <listitem>
          <para>null layerId and null category</para>
        </listitem>
      </orderedlist></para>

    <para>The properties are null when no value is specified. If the
    application context contains more than one bean matching bean (for each of
    the lines above) the last definition is used.</para>

    <section id="default-si">
      <title>Default spatial indices</title>

      <para>??? @TODO</para>
    </section>
  </section>
</chapter>
