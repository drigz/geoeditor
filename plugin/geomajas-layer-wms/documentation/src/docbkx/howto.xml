<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<chapter id="chapter-howto">
  <title>How-to</title>

  <para>Usage examples for the WMS layer.</para>

  <section>
    <title>Using the GetFeatureInfo capability</title>

    <para>As an example, let's show some code which implements a click (or
    mouse up) event which should read the feature information. It assumes the
    map widget is known in the variable mapWidget. :</para>

    <example>
      <title>Using the SearchByPoint command</title>

      <programlisting>public void onMouseUp(MouseUpEvent event) {
    Coordinate worldPosition = getWorldPosition(event);
    Point point = mapWidget.getMapModel().getGeometryFactory().createPoint(worldPosition);

    final SearchByPointRequest rasterLayerRequest = new SearchByPointRequest();
    rasterLayerRequest.setLocation(point.getCoordinate());
    rasterLayerRequest.setCrs(mapWidget.getMapModel().getCrs());
    rasterLayerRequest.setSearchType(SearchByPointRequest.SEARCH_FIRST_LAYER);<co
          id="coco1" />
    rasterLayerRequest.setPixelTolerance(pixelTolerance);<co id="coco2" />
    rasterLayerRequest.setLayerIds(getServerLayerIds(mapWidget.getMapModel()));
    rasterLayerRequest.setBbox(toBbox(mapWidget.getMapModel().getMapView().getBounds()));
    rasterLayerRequest.setScale(mapWidget.getMapModel().getMapView().getCurrentScale());

    GwtCommand commandRequest = new GwtCommand(SearchByPointRequest.COMMAND);
    commandRequest.setCommandRequest(rasterLayerRequest);
    GwtCommandDispatcher.getInstance().execute(commandRequest, 
		    new AbstractCommandCallback&lt;SearchByPointResponse&gt;() {
        public void execute(SearchByPointResponse response) {
            // ... process response<co id="coco3" />
        }
    });
}</programlisting>

      <calloutlist>
        <callout arearefs="coco1">
          <para>This is the default.</para>
        </callout>

        <callout arearefs="coco2">
          <para>Pixel tolerance if known. Currently not used by the WMS
          layer.</para>
        </callout>

        <callout arearefs="coco3">
          <para>Here you can do what needs to be done with the
          response.</para>
        </callout>
      </calloutlist>
    </example>

    <para>Note that the features returned are not defined anywhere in the
    configuration. The feature is filled with whatever data is
    retrieved from the WMS server.</para>
  </section>
</chapter>
