<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-introduction">
  <title>Introduction</title>

  <para>The rasterizing plug-in enables the conversion of vector data
  (coordinate-based geometry definitions) to raster data (images). It allows
  to extend the vector layer rendering pipeline by introducing an extra
  rasterizing step. The vector tile response will thereby contain an URL
  content-type that allows the client to fetch the tile as a normal
  image.</para>

  <para>From a visualization view point, rasterizing tiles are quite
  comparable to vector tiles for many use cases such as panning and zooming.
  They have significant advantages when the amount of vector data is high,
  either in terms of features or in the amount of coordinates for each
  feature. Especially for web clients, DOM-based vector rendering (SVG/VML) is
  quite slow and should not be used beyond a couple of thousand features
  (state of the art as of beginning 2011). In this case rasterizing provides a
  significant performance boost, especially when combined with server-side
  caching of the image tiles.</para>

  <para>On the other hand, there are some use cases which are evidently
  difficult to treat without vectorial information at hand:</para>

  <para><itemizedlist>
      <listitem>
        <para>editing of geometries.</para>
      </listitem>

      <listitem>
        <para>snapping to other layers.</para>
      </listitem>

      <listitem>
        <para>selection of features.</para>
      </listitem>
    </itemizedlist>Geomajas provides the ability to load vector data on demand
  in such cases, thereby combining the best of both worlds.</para>

  <section>
    <title>Pipeline overview</title>

    <para>The rasterizing plug-in adds a rasterizing service and some pipeline
    steps to the framework, as well as a controller to serve the tile
    images.</para>

    <para>The normal pipeline for getting the vector tiles is enhanced with an
    extra rasterizing step which is indicated in green in the following
    figure:</para>

    <para><figure>
        <title>Vector tile pipeline for rasterizing</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/rastertilestep.png" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>The rasterizing takes place in the RasterTile step, right after
    the point where all the features have been collected and transformed to
    the screen coordinate system. It goes in front of the GetTileFill step
    because it has to work with the complete set of interacting features of
    the tile. The GetTileFill step filters the features to assure they are
    only drawn in one of the tiles<footnote>
        <para>This is needed for SVG and VML rendering to avoid such features
        being drawn twice. Features are included in the tile which contains
        the first point of the geometry or (if the first point is not inside
        the layer maximum bounds) to the super-tile.</para>
      </footnote>. For rasterizing this is not necessary, as drawing cannot
    span the tile boundary.</para>

    <para>The RasterTile step performs the following actions:</para>

    <para><itemizedlist>
        <listitem>
          <para>check the rebuild cache and make sure it has the necessary
          context to rebuild the rasterized tile image.</para>
        </listitem>

        <listitem>
          <para>if the rasterizing needs to be done now:<itemizedlist>
              <listitem>
                <para>build the rasterized tile image by calling the
                ImageService (see next chapter).</para>
              </listitem>

              <listitem>
                <para>put the rasterized tile image in the normal cache so
                that it can be fetched by the controller.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para>set the feature content of the tile to a unique URL that
          contains the cache key.</para>
        </listitem>
      </itemizedlist>After this step, the cache must contain both the rebuild
    information and the rasterized image. The tile that is returned must
    contain the URL to fetch the tile image. Normally, the client will
    immediately fetch this URL from the server in a separate client-server
    interaction.</para>

    <para>Our next figure shows how this URL request is handled:<figure>
        <title>URL handling for rasterization</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/raster_url_handling.png" width="100%" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>The following series of actions take place:<itemizedlist>
        <listitem>
          <para>the dispatcher servlet dispatches the request to the
          RasterizingController, based on the URL prefix
          <code>/rasterizing/.</code></para>
        </listitem>

        <listitem>
          <para>the RasterizingController invokes a separate rasterizing
          pipeline, which handles the following steps.</para>
        </listitem>

        <listitem>
          <para>The rasterizing cache is checked so if it contains the
          requested image. If successful, the pipeline ends.</para>
        </listitem>

        <listitem>
          <para>the Rasterize step tries to fetch the rebuild context from the
          rebuild cache. If successful, the vector tile pipeline is invoked
          again and the resulting image is returned. If not, an empty image is
          returned.</para>
        </listitem>
      </itemizedlist></para>

    <para>Note that you can configure when the initial rasterizing takes
    place. This can either be done when requesting the vector tile or when
    requesting the tile image. There is a trade-off, handling the rasterizing
    at vector tile requests optimizes throughput for the back-end, but seems
    slower for the client.</para>
  </section>

  <section id="image-rendering-services">
    <title>The image and rendering services</title>

    <para>The rasterizing process has an application-level service, called
    <code>ImageService</code> ,which has methods for creating a legend and map
    image. This service internally calls a pipeline with three steps. The most
    important step, and the step which is responsible for the actual
    rendering, is the <code>RenderMapStep</code>, This step uses itself a
    <code>RenderingService</code>, which is primarily a wrapper of the
    GeoTools <code>StreamRenderer</code> class.</para>

    <para>Our rasterizing is based on the GeoTools rasterizing approach. In
    this approach, a map context is constructed that contains all the
    necessary information to rasterize a map. A map context contains the
    following components:</para>

    <itemizedlist>
      <listitem>
        <para>A list of layers: layers can be ordinary vector layers, raster
        layers or so-called direct layers, which are responsible for their own
        rendering.</para>
      </listitem>

      <listitem>
        <para>A view port: a view port contains an area of interest and a
        screen area. It provides the transformation between map an screen
        coordinates.</para>
      </listitem>
    </itemizedlist>

    <para>The actual rasterizing happens by passing the map context to the
    <code>RenderingService</code> along with a <code>Graphics2D</code> object
    for drawing (usually to an internal buffer).</para>

    <para>The following picture shows the services and the interaction with
    pipeline steps and factories:</para>

    <figure>
      <title>Image service</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/imageservice.png" width="50%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>The image service can be used to rasterize single tiles or complete
    maps, depending on the composition of the map context. The
    <code>ImageService</code> does not directly take a map context as an
    argument, but expects a <code>ClientMapInfo</code> DTO object
    instead:</para>

    <xi:include href="listing/ImageService.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The <code>ClientMapInfo</code> DTO object has been extended a bit to
    include all the rasterizing information needed (see next chapter).</para>
  </section>

  <section>
    <title>Rasterizing info classes</title>

    <para>The <code>ClientMapInfo</code> DTO object has been extended to pass
    plugin-specific information to the rasterizing plugin backend. This was
    done by using the generic <code>ClientWidgetInfo</code> mechanism for
    adding per-map and per-layer information. Three extensions have been
    defined:</para>

    <itemizedlist>
      <listitem>
        <para><code>MapRasterizingInfo</code>: this is a
        <code>ClientWidgetInfo</code> extension that is applied at the map
        level and contains such extra information as scale and bounds, extra
        layers to be visualized, background transparency and legend
        information (in case a legend has to be rendered)</para>
      </listitem>

      <listitem>
        <para><code>RasterLayerRasterizingInfo</code>: this is a
        <code>ClientWidgetInfo</code> extension that is applied at the level
        of a raster layer and contains client-side dynamic information like
        visibility and css styling (opacity)</para>
      </listitem>

      <listitem>
        <para><code>VectorLayerRasterizingInfo</code>: this is a
        <code>ClientWidgetInfo</code> extension that is applied at the level
        of a vector layer and contains client-side dynamic information at the
        layer level like visibility, selection and style</para>
      </listitem>
    </itemizedlist>

    <para>The appropriate ClientWidgetInfo object should be set on the map and
    each of its layers using <code>getWidgetInfo().put(key,info)</code> before
    calling the <code>ImageService.</code>The following subsections will
    explain each of the extension DTO objects.</para>

    <section>
      <title>MapRasterizingInfo</title>

      <para>The <code>MapRasterizingInfo</code> DTO object contains the
      metadata information that is needed to rasterize the map. The following
      attributes are provided:</para>

      <table>
        <title>MapRasterizingInfo attributes</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>bounds</entry>

              <entry>Bounds of the map region that should be
              visualized</entry>
            </row>

            <row>
              <entry>scale</entry>

              <entry>Scale (in pixels per map unit). In combination with the
              bounds this determines the dimensions of the raster
              image</entry>
            </row>

            <row>
              <entry>transparent</entry>

              <entry>Determines whether the resulting image should be
              transparent. If false, non of the layers can use transparency
              !</entry>
            </row>

            <row>
              <entry>extraLayers</entry>

              <entry>A list of ClientLayerInfo DTO objects that should be
              added on top of the configured layers of the map. This opens up
              the possibility to render additonal layers on top of the map
              that were not part of the original map configuration. It also
              allows to add extra objects on top of the map, such as
              calculated buffers or feature geometries (see <link
              linkend="client-geometry-section">ClientGeometryLayerInfo</link>).</entry>
            </row>

            <row>
              <entry>legendRasterizingInfo</entry>

              <entry>A DTO object that contains specific information for
              rendering the legend (in case the <code>renderLegend()</code>
              method is used. It determines the width, height and font
              properties of the legend.</entry>
            </row>

            <row>
              <entry>ClientGeometryLayerInfo</entry>

              <entry>A subclass of the ClientLayerInfo object. This is used to
              add a geometry to the map that does not have a server side
              equivalent.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>RasterLayerRasterizingInfo</title>

      <para>The <code>RasterLayerRasterizingInfo</code> DTO object contains
      metadata information that is needed to rasterize a raster layer. It
      contains the following attributes:</para>

      <table>
        <title>RasterLayerRasterizingInfo</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>showing</entry>

              <entry>True if the layer should be rasterized. This property is
              necessary because, as the RasterLayerRasterizingInfo is added to
              the original layer configuration of the map, skipping of certain
              layers should be possible by allowing showing = false (leaving
              the original configuration untouched).</entry>
            </row>

            <row>
              <entry>cssStyle</entry>

              <entry>The CSS style property to be set on the raster layer
              images. This is primarily used to set the opacity.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>VectorLayerRasterizingInfo</title>

      <para>The <code>VectorLayerRasterizingInfo</code> DTO object contains
      metadata information that is needed to rasterize a vector layer. It
      contains the following attributes:</para>

      <table>
        <title>VectorLayerRasterizingInfo</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>showing</entry>

              <entry>True if the layer should be rasterized. This property is
              necessary because, as the VectorLayerRasterizingInfo is added to
              the original layer configuration of the map, skipping of certain
              layers should be possible by allowing showing = false (leaving
              the original configuration untouched).</entry>
            </row>

            <row>
              <entry>style</entry>

              <entry>The style to be applied for rasterizing the layer. This
              may be different from the configured style of the layer.</entry>
            </row>

            <row>
              <entry>selectionRule</entry>

              <entry>The style rule to be applied to the selected features.
              Selected features will be shown in a specific selectiion style
              defined by this rule.</entry>
            </row>

            <row>
              <entry>selectedFeatureIds</entry>

              <entry>The feature identifiers of the selected features.</entry>
            </row>

            <row>
              <entry>filter</entry>

              <entry>An extra filter to limit the features that will be
              rasterized.</entry>
            </row>

            <row>
              <entry>paintLabels</entry>

              <entry>Wether labels should be painted.</entry>
            </row>

            <row>
              <entry>paintGeometries</entry>

              <entry>Wether geometries should be painted.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section id="client-geometry-section">
      <title>ClientGeometryLayerInfo</title>

      <para>The <code>ClientGeometryLayerInfo</code> DTO object contains
      metadata information that is needed to rasterize geometries that are not
      part of the map configuration and have no server-side layer equivalent.
      This type of layer can be added as an extra layer to the
      MapRasterizingInfo DTO to add such objects to the map like user-drawn
      geometries, calculated buffers, bounds, etcetera. It contains the
      following attributes:</para>

      <table>
        <title>ClientGeometryLayerInfo</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Name</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>showing</entry>

              <entry>True if the layer should be rasterized.</entry>
            </row>

            <row>
              <entry>style</entry>

              <entry>The style to be applied for rasterizing the
              geometries.</entry>
            </row>

            <row>
              <entry>layerType</entry>

              <entry>The type of the geometries. Should be one of the vector
              layer types</entry>
            </row>

            <row>
              <entry>geometries</entry>

              <entry>The list of geometries to be rendered. All geometries are
              assumed to be defined in the CRS of the map.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section>
    <title>RenderingService and LayerFactoryService</title>

    <para>As indicated in the <link linkend="image-rendering-services">image
    and rendering services </link>section, the actual rendering of the
    map/legend is based on the Geotools map context and renderer concepts. The
    RenderingService interface has the following methods:</para>

    <xi:include href="listing/RenderingService.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>Both methods take a Geotools <code>MapContext</code> object as
    parameter. The <code>MapContext</code> object contains a list of Geotools
    <code>Layer</code> objects, The Geomajas layer DTO objects are internally
    converted to Geotools layers by using an abstract factory pattern. The
    abstract factory has a method to check whether it can perform the layer
    creation (based on the passed <code>ClientLayerInfo</code> object) and an
    actual factory method:</para>

    <xi:include href="listing/LayerFactory.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The <code>LayerFactory</code> also defines a number of user data
    keys that allow Geotools <code>Layer</code> implementations to access
    Geomajas DTO objects internally, should that be necessary. </para>

    <para>The following concrete LayerFactory implementations are
    available:</para>

    <itemizedlist>
      <listitem>
        <para><code>VectorLayerFactory</code>: accepts a
        <code>ClientVectorLayerInfo</code> DTO and creates a Geotools
        <code>FeatureLayer</code></para>
      </listitem>

      <listitem>
        <para><code>RasterLayerFactory</code>: accepts a
        <code>ClientRasterLayerInfo</code> DTO and creates a
        <code>RasterDirectLayer</code>, which is our own implementation of a
        Geotools <code>DirectLayer</code> for rendering raster layers</para>
      </listitem>

      <listitem>
        <para><code>GeometryLayerFactory</code>:accepts a
        <code>GeometryLayerInfo</code> DTO and creates a
        <code>GeometryDirectLayer</code>, which is our own implementation of a
        Geotools <code>DirectLayer</code> for rendering geometries</para>
      </listitem>
    </itemizedlist>

    <para>Concrete layer factories are instantiated as singleton components in
    the application context. A separate <code>LayerFactoryService</code> takes
    care of iterating over the configured layer factories and is the entry
    point for creating the layers for the map context in the
    <code>AddLayersStep</code> of the rasterizing pipeline. The current system
    can be extended by creating an additional <code>ClientLayerInfo</code>
    class and a complimentary <code>LayerFactory</code>. The custom
    <code>LayerFactory</code> should create a Geotools <code>Layer</code>
    implementation based on <code>DirectLayer</code>.</para>
  </section>
</chapter>
