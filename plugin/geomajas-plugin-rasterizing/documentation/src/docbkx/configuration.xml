<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2013 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-configuration">
  <title>Configuration</title>

  <para>The configuration of the rasterization involves the following
  elements:</para>

  <para><itemizedlist>
      <listitem>
        <para>configure the vector tile pipeline to use rasterization.</para>
      </listitem>

      <listitem>
        <para>configure the rasterizing service.</para>
      </listitem>

      <listitem>
        <para>configure the Style2DFactoryService.</para>
      </listitem>
    </itemizedlist></para>

  <section id="dependencies">
    <title>Dependencies</title>

    <para>Make sure you include the correct version of the plug-in in your
    project. Use the following excerpt (with the correct version) in the
    dependencyManagement section of your project:</para>

    <informalexample>
      <programlisting> &lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt;
    &lt;artifactId&gt;geomajas-plugin-rasterizing-all&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;type&gt;pom&lt;/type&gt;
    &lt;scope&gt;import&lt;/scope&gt;
&lt;/dependency&gt;
</programlisting>
    </informalexample>

    <para>If you are using geomajas-dep, this includes the latest released
    version of the rasterizing plug-in (at the time of publishing of that
    version). If you want to overwrite the rasterizing plug-in version, make
    sure to include this excerpt <emphasis>before</emphasis> the geomajas-dep
    dependency.</para>

    <para>You can now include the actual dependency without explicit
    version.</para>

    <informalexample>
      <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt; 
    &lt;artifactId&gt;geomajas-plugin-rasterizing&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
    </informalexample>

    <para>If you want to make use of the toolbar actions for exporting map and
    legend images, you must add the GWT face dependency as well:</para>

    <informalexample>
      <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt; 
    &lt;artifactId&gt;geomajas-plugin-rasterizing-gwt&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
    </informalexample>

    <para>In this case you should also add the module inheritance to your GWT
    module descriptor:</para>

    <informalexample>
      <programlisting>&lt;module&gt;
    &lt;inherits name="org.geomajas.plugin.rasterizing.Rasterizing"/&gt;
&lt;/module&gt;</programlisting>
    </informalexample>

    <para>There is also a dependency for the pure GWT face. For the pure GWT
    face, the toolbar actions have not yet been implemented, though. The
    dependency just contains a module definition that includes the DTO
    objects. This dependency is useful for pure GWT plugins that need to
    communicate with rasterizing backend, like the Simple Printing
    Plugin:</para>

    <para><informalexample>
        <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.geomajas.plugin&lt;/groupId&gt; 
    &lt;artifactId&gt;geomajas-plugin-rasterizing-puregwt&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
      </informalexample>In this case you should add the same module
    inheritance to your GWT module descriptor:</para>

    <para><informalexample>
        <programlisting>&lt;module&gt;
    &lt;inherits name="org.geomajas.plugin.rasterizing.Rasterizing"/&gt;
&lt;/module&gt;</programlisting>
      </informalexample></para>
  </section>

  <section>
    <title>Pipeline configuration</title>

    <para>The only pipeline that can optionally use rasterization is the
    GetVectorTile pipeline used by the VectorLayerService. If you want to use
    rasterization without caching of the rasterized image, you can add the
    following configuration location to your web.xml file:<programlisting>classpath:org/geomajas/plugin/rasterizing/DefaultRasterizedPipelines.xml</programlisting></para>

    <para>If you want to maximize caching (including enabling caching for all
    layers), add the following location instead:<programlisting>classpath:org/geomajas/plugin/rasterizing/DefaultCachedAndRasterizedPipelines.xml</programlisting></para>

    <para>Alternatively you can configure for each layer individually which
    pipeline should be used.</para>

    <para>The following rasterized pipelines exist (bean name):</para>

    <para><itemizedlist>
        <listitem>
          <para>PIPELINE_GET_VECTOR_TILE_RASTERIZE_BUILD_URL: pipeline to get
          a tile for a vector layer. This will just generate the raster image
          URL, the rasterization will take place when the URL is
          requested.</para>
        </listitem>

        <listitem>
          <para>PIPELINE_GET_VECTOR_TILE_RASTERIZE: pipeline to rasterize a
          tile for a vector layer. This image is built but not cached.</para>
        </listitem>

        <listitem>
          <para>PIPELINE_GET_VECTOR_TILE_RASTERIZE_WITH_CACHING: pipeline to
          rasterize a tile for a vector layer and cache the image.</para>
        </listitem>
      </itemizedlist></para>

    <para>A pipeline needs to be defined for generating the raster image
    itself. You can set the specific pipelines to use for a layer using a
    configuration like this:</para>

    <example>
      <title>Applying the rasterized pipeline for getVectorTile() on
      myLayer</title>

      <programlisting>&lt;bean class="org.geomajas.service.pipeline.PipelineInfo"&gt;
    &lt;property name="pipelineName"&gt;
        &lt;util:constant static-field="org.geomajas.service.pipeline.PipelineCode.PIPELINE_GET_VECTOR_TILE"/&gt;
    &lt;/property&gt;
    &lt;property name="layerId" value="myLayer" /&gt;
    &lt;property name="delegatePipeline" ref="PIPELINE_GET_VECTOR_TILE_RASTERIZE_BUILD_URL" /&gt;
&lt;/bean&gt;

&lt;bean class="org.geomajas.service.pipeline.PipelineInfo"&gt;
    &lt;property name="pipelineName"&gt;
        &lt;util:constant static-field="org.geomajas.plugin.rasterizing.api.RasterizingPipelineCode.PIPELINE_GET_VECTOR_TILE_RASTERIZING" /&gt;
    &lt;/property&gt;
    &lt;property name="layerId" value="myLayer" /&gt;
    &lt;property name="delegatePipeline" ref="PIPELINE_GET_VECTOR_TILE_RASTERIZE" /&gt;
&lt;/bean&gt;</programlisting>
    </example>
  </section>

  <section>
    <title>Rasterizing style configuration - SLD (Styled Layer
    Descriptor)</title>

    <para>The rendering service is based on the Geotools Rendere and makes use
    of the SLD standard for style configuration. This means that styles are
    completely defined through SLD. The Geomajas style configuration has been
    extended to support SLD 1.0.0, and more specifically the schema defined in
    GeoTools (which is also used by Udig and GeoServer). The support of SLD
    opens up many possibilities for styling that were previously not
    available. A selection of SLD styles that can be used as a source of
    inspiration - in addition to the <ulink
    url="http://www.opengeospatial.org/standards/sld">standard</ulink> itself,
    of course, which is the ultimate reference - can be found in the <ulink
    url="http://docs.geoserver.org/stable/en/user/styling/sld-cookbook/index.html">SLD
    cookbook</ulink> of GeoServer. The rasterizing showcase demonstrates most
    cookbook examples.</para>

    <para>An example of how to configure the SLD file for a layer style in
    Geomajas is shown below:</para>

    <xi:include href="listing/NamedStyleInfo.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>It is sufficient to let the <code>sldLocation</code> property point
    to the (relative) location of the SLD file.</para>

    <para>An example of an SLD style is shown below:</para>

    <xi:include href="listing/SimpleLine.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The following limitations hold for the SLD file: .</para>

    <itemizedlist>
      <listitem>
        <para>the configuration should contain a <code>NamedLayer</code> that
        holds a <code>UserStyle</code></para>
      </listitem>

      <listitem>
        <para>the user style should contain a single <code>FeatureStyle</code>
        with at least one rule.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Commands</title>

    <para>Apart from the usage within the map - which is based on the generic
    <code>GetVectorTileCommand</code> - the <code>RasterizeMapCommand</code>
    can be used to separately fetch an image URL to a rasterized map and/or
    legend:</para>

    <table>
      <title>RasterizeMapCommand</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Id</entry>

            <entry>command.rasterizing.RasterizeMap</entry>
          </row>

          <row>
            <entry>request object class</entry>

            <entry>org.geomajas.plugin.rasterizing.command.dto.RasterizeMapRequest</entry>
          </row>

          <row>
            <entry>request parameters</entry>

            <entry>
              <itemizedlist>
                <listitem>
                  <para>clientMapInfo: the map info with the rasterizing
                  extensions</para>
                </listitem>
              </itemizedlist>
            </entry>
          </row>

          <row>
            <entry>Description</entry>

            <entry>Command that creates an image of the map and the legend,
            adds it to the cache and returns an URL for both images</entry>
          </row>

          <row>
            <entry>response object class</entry>

            <entry>org.geomajas.plugin.rasterizing.command.dto.RasterizeMapResponse</entry>
          </row>

          <row>
            <entry>response parameters</entry>

            <entry>
              <itemizedlist>
                <listitem>
                  <para>mapKey: cache key for the map image</para>
                </listitem>

                <listitem>
                  <para>legendKey: cache key for the legend image</para>
                </listitem>

                <listitem>
                  <para>mapUrl: URL of the map image</para>
                </listitem>

                <listitem>
                  <para>legendUrl: URL of the legend image</para>
                </listitem>
              </itemizedlist>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>To call the command, an extended <code>ClientMapInfo</code> object
    should be created client-side and passed as a parameter to the request. To
    facilitate this, an <code>ImageUrlService</code> is provided that perfoms
    this preparation stage in the common use case where the user wants to
    generate an image of the current screen. The following methods are
    provided by this service:</para>

    <xi:include href="listing/ImageUrlService.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para>The basic method to call is the <code>createImageUrl(MapWidget map,
    ImageUrlCallback imageCallBack)</code> method, which fetches the current
    map and legend image. The result is received asynchronously by passing a
    special callback interface <code>ImageUrlCallback</code>. The map
    preparation part can be called separately through the
    <code>makeRasterizable()</code> method, which is useful in the case where
    the user wants to make some additional changes to the rasterizing
    extension data. When using this method, the preparation stage can be
    consequently skipped by calling the <code>createImageUrl(MapWidget map,
    ImageUrlCallback imageCallBack, boolean makeRasterizable)</code>method
    with <code>makeRasterizable = false</code>.</para>
  </section>

  <section>
    <title>Actions and toolbar configuration</title>

    <para>For the common use case of making a print of the current map or
    legend, 2 toolbar actions have been registered:</para>

    <itemizedlist>
      <listitem>
        <para><code>GetMapImageAction</code>: this action exports an image of
        the current map screen in a separate browser window</para>
      </listitem>

      <listitem>
        <para><code>GetLegendImageAction</code>: this action exports an image
        of the current legend in a separate browser window</para>
      </listitem>
    </itemizedlist>

    <para>The following configuration snippet shows how to configure these
    actions in the toolbar:</para>

    <xi:include href="listing/ToolConfiguration.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <para><code>GetLegendImageAction</code> has a single configuration
    parameter <code>showAllLayers</code>. If set to true, the generated legend
    image contains all layers of the layer tree. Otherwise, only the visible
    layers are displayed.</para>
  </section>
</chapter>
